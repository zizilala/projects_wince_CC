; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BSP_COMMON\ARGS\args.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|s_dwHWEntropy| % 0x8
|s_bInitialized| % 0x4

  00000			 AREA	 |.data|, DATA
|s_uuid| DCD	0x0
	DCW	0x3024
	DCW	0x801
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
|s_rndisMAC| DCB 0x0
	DCB	0x24
	DCB	0x30
	DCB	0xab
	DCB	0x12
	DCB	0x34

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALArgsQuery|
	EXPORT	|??_C@_1EA@DJGHLELP@?$AA?9?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@CLMEBIJE@?$AA?$CL?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|memcpy|
	IMPORT	|memset|
	IMPORT	|strlen|

  0000c			 AREA	 |.bss|, NOINIT
|s_deviceId| %	0x18
|s_deviceId| %	0x18
; File c:\wince600\platform\z2170p\src\bsp_common\args\args.c

  00000			 AREA	 |.pdata|, PDATA
|$T46816| DCD	|$LN36@OALArgsQue|
	DCD	0x40009601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@DJGHLELP@?$AA?9?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "A", 0x0, "r", 0x0, "g"
	DCB	0x0, "s", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "r", 0x0, "y"
	DCB	0x0, "(", 0x0, "p", 0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CLMEBIJE@?$AA?$CL?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "A", 0x0, "r", 0x0, "g"
	DCB	0x0, "s", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "r", 0x0, "y"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALArgsQuery| PROC

; 65   : {

  00000		 |$LN36@OALArgsQue|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M46813|
  00004	e1a05000	 mov         r5, r0

; 66   :     VOID *pData = NULL;
; 67   :     BSP_ARGS *pArgs;
; 68   : 
; 69   :     OALMSG(OAL_ARGS&&OAL_FUNC, (L"+OALArgsQuery(%d)\r\n", type));

  00008	e59f6244	 ldr         r6, [pc, #0x244]
  0000c	e3a04000	 mov         r4, #0
  00010	e5968440	 ldr         r8, [r6, #0x440]
  00014	e3180010	 tst         r8, #0x10
  00018	0a000005	 beq         |$LN25@OALArgsQue|
  0001c	e3180004	 tst         r8, #4
  00020	0a000003	 beq         |$LN25@OALArgsQue|
  00024	e59f0224	 ldr         r0, [pc, #0x224]
  00028	e1a01005	 mov         r1, r5
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5968440	 ldr         r8, [r6, #0x440]
  00034		 |$LN25@OALArgsQue|

; 70   : 
; 71   :     // Get pointer to expected boot args location
; 72   :     pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);

  00034	e3a0920a	 mov         r9, #0xA, 4

; 73   : 
; 74   :     // Check if there is expected signature
; 75   :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 76   :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) ||
; 77   :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  00038	e5992000	 ldr         r2, [r9]
  0003c	e59f3208	 ldr         r3, [pc, #0x208]
  00040	e1520003	 cmp         r2, r3
  00044	1a000075	 bne         |$cleanUp$46739|
  00048	e1d930b4	 ldrh        r3, [r9, #4]
  0004c	e3530001	 cmp         r3, #1
  00050	1a000072	 bne         |$cleanUp$46739|
  00054	e1d930b6	 ldrh        r3, [r9, #6]
  00058	e3530001	 cmp         r3, #1
  0005c	1a00006f	 bne         |$cleanUp$46739|

; 78   :         goto cleanUp;
; 79   : 
; 80   : 
; 81   :     //  Initialize settings
; 82   :     if( s_bInitialized == FALSE )

  00060	e59f71e0	 ldr         r7, [pc, #0x1E0]
  00064	e59f41d8	 ldr         r4, [pc, #0x1D8]
  00068	e3a0a20a	 mov         r10, #0xA, 4
  0006c	e5973020	 ldr         r3, [r7, #0x20]
  00070	e3530000	 cmp         r3, #0
  00074	1a000034	 bne         |$LN20@OALArgsQue|

; 83   :     {
; 84   :         int     i, count;
; 85   :         UCHAR   val;
; 86   : 
; 87   :         // Copy prefix for DEVICEID    
; 88   :         count = strlen((char *)pArgs->DevicePrefix);

  00078	e38a0048	 orr         r0, r10, #0x48
  0007c	eb000000	 bl          strlen
  00080	e1a06000	 mov         r6, r0

; 89   : 
; 90   :         if (count > sizeof(s_deviceId)-1) count = sizeof(s_deviceId) -1;

  00084	e3560017	 cmp         r6, #0x17

; 91   :         memset(s_deviceId, 0, sizeof(s_deviceId));

  00088	e3a02018	 mov         r2, #0x18
  0008c	e3a01000	 mov         r1, #0
  00090	e1a00007	 mov         r0, r7
  00094	83a06017	 movhi       r6, #0x17
  00098	eb000000	 bl          memset

; 92   :         memcpy(s_deviceId, pArgs->DevicePrefix, count);

  0009c	e1a02006	 mov         r2, r6
  000a0	e38a1048	 orr         r1, r10, #0x48
  000a4	e1a00007	 mov         r0, r7
  000a8	eb000000	 bl          memcpy
  000ac	e3a01000	 mov         r1, #0
  000b0		 |$LL18@OALArgsQue|

; 93   : 
; 94   :         // Append DeviceID as hex string
; 95   :         for( i = 0; i < 8 && (count < sizeof(s_deviceId) - 1); i++, count++)

  000b0	e3560017	 cmp         r6, #0x17
  000b4	2a00000b	 bcs         |$LN16@OALArgsQue|

; 96   :         {
; 97   :             val = (UCHAR)((pArgs->deviceID >> (28 - i*4)) & 0xF);

  000b8	e5992010	 ldr         r2, [r9, #0x10]
  000bc	e261301c	 rsb         r3, r1, #0x1C
  000c0	e2811004	 add         r1, r1, #4
  000c4	e1a03332	 mov         r3, r2, lsr r3
  000c8	e203300f	 and         r3, r3, #0xF

; 98   :             s_deviceId[count] = val < 10 ? '0' + val : 'A' + val - 10;

  000cc	e353000a	 cmp         r3, #0xA
  000d0	32833030	 addcc       r3, r3, #0x30
  000d4	22833037	 addcs       r3, r3, #0x37
  000d8	e7c63007	 strb        r3, [r6, +r7]
  000dc	e2866001	 add         r6, r6, #1
  000e0	e3510020	 cmp         r1, #0x20
  000e4	bafffff1	 blt         |$LL18@OALArgsQue|
  000e8		 |$LN16@OALArgsQue|

; 99   :         }
; 100  : 
; 101  :         //  Use DeviceID as last part of UUID
; 102  :         s_uuid.Data4[4] = (UCHAR)(pArgs->deviceID >> 24);

  000e8	e5d93013	 ldrb        r3, [r9, #0x13]

; 103  :         s_uuid.Data4[5] = (UCHAR)(pArgs->deviceID >> 16);
; 104  :         s_uuid.Data4[6] = (UCHAR)(pArgs->deviceID >> 8);
; 105  :         s_uuid.Data4[7] = (UCHAR)(pArgs->deviceID);
; 106  : 
; 107  :         //  Use DeviceID for HWEntropy value
; 108  :         s_dwHWEntropy[0] = pArgs->deviceID;
; 109  :         s_dwHWEntropy[1] = pArgs->deviceID ^ 0xFFFFFFFF;
; 110  : 
; 111  :         //  Use DeviceID for ActiveSync RNDIS MAC
; 112  :         s_rndisMAC[2] = (UCHAR) (pArgs->deviceID >> 24);
; 113  :         s_rndisMAC[3] = (UCHAR) (pArgs->deviceID >> 16);
; 114  :         s_rndisMAC[4] = (UCHAR) (pArgs->deviceID >> 8);
; 115  :         s_rndisMAC[5] = (UCHAR) (pArgs->deviceID);
; 116  : 
; 117  :         s_bInitialized = TRUE;

  000ec	e3a02001	 mov         r2, #1
  000f0	e5872020	 str         r2, [r7, #0x20]
  000f4	e5c4300c	 strb        r3, [r4, #0xC]
  000f8	e1d931b2	 ldrh        r3, [r9, #0x12]
  000fc	e5c4300d	 strb        r3, [r4, #0xD]
  00100	e5993010	 ldr         r3, [r9, #0x10]
  00104	e1a03423	 mov         r3, r3, lsr #8
  00108	e5c4300e	 strb        r3, [r4, #0xE]
  0010c	e5993010	 ldr         r3, [r9, #0x10]
  00110	e5c4300f	 strb        r3, [r4, #0xF]
  00114	e5993010	 ldr         r3, [r9, #0x10]
  00118	e5873018	 str         r3, [r7, #0x18]
  0011c	e5993010	 ldr         r3, [r9, #0x10]
  00120	e1e03003	 mvn         r3, r3
  00124	e587301c	 str         r3, [r7, #0x1C]
  00128	e5d93013	 ldrb        r3, [r9, #0x13]
  0012c	e5c43012	 strb        r3, [r4, #0x12]
  00130	e1d931b2	 ldrh        r3, [r9, #0x12]
  00134	e5c43013	 strb        r3, [r4, #0x13]
  00138	e5993010	 ldr         r3, [r9, #0x10]
  0013c	e1a03423	 mov         r3, r3, lsr #8
  00140	e5c43014	 strb        r3, [r4, #0x14]
  00144	e5993010	 ldr         r3, [r9, #0x10]
  00148	e5c43015	 strb        r3, [r4, #0x15]
  0014c		 |$LN20@OALArgsQue|

; 118  :     }
; 119  : 
; 120  : 
; 121  :     // Depending on required args
; 122  :     switch (type)

  0014c	e3550042	 cmp         r5, #0x42
  00150	8a000019	 bhi         |$LN29@OALArgsQue|
  00154	0a000016	 beq         |$LN6@OALArgsQue|
  00158	e3550001	 cmp         r5, #1
  0015c	0a000012	 beq         |$LN10@OALArgsQue|
  00160	e3550002	 cmp         r5, #2
  00164	0a00000d	 beq         |$LN12@OALArgsQue|
  00168	e3550003	 cmp         r5, #3
  0016c	0a00002b	 beq         |$cleanUp$46739|
  00170	e3550005	 cmp         r5, #5
  00174	0a000007	 beq         |$LN13@OALArgsQue|
  00178	e3550040	 cmp         r5, #0x40
  0017c	0a000003	 beq         |$LN11@OALArgsQue|
  00180	e3550041	 cmp         r5, #0x41
  00184	1a000016	 bne         |$LN1@OALArgsQue|

; 143  :           
; 144  :         case OAL_ARGS_QUERY_UUID:
; 145  :             pData = &s_uuid;
; 146  :             break;
; 147  : 
; 148  :         case OAL_ARGS_QUERY_HWENTROPY:
; 149  :             pData = s_dwHWEntropy;

  00188	e2874018	 add         r4, r7, #0x18

; 150  :             break;

  0018c	ea000023	 b           |$cleanUp$46739|
  00190		 |$LN11@OALArgsQue|

; 131  : 
; 132  :         case OAL_ARGS_QUERY_COLDBOOT:
; 133  :             pData = &pArgs->coldBoot;

  00190	e3a042ca	 mov         r4, #0xCA, 4

; 134  :             break;

  00194	ea000021	 b           |$cleanUp$46739|
  00198		 |$LN13@OALArgsQue|

; 123  :     {
; 124  :         case OAL_ARGS_QUERY_UPDATEMODE:
; 125  :             pData = &pArgs->updateMode;

  00198	e3a0428a	 mov         r4, #0x8A, 4

; 126  :             break;

  0019c	ea00001f	 b           |$cleanUp$46739|
  001a0		 |$LN12@OALArgsQue|
  001a0	e3a0320a	 mov         r3, #0xA, 4

; 127  : 
; 128  :         case OAL_ARGS_QUERY_KITL:
; 129  :             pData = &pArgs->kitl;

  001a4	e3834018	 orr         r4, r3, #0x18

; 130  :             break;

  001a8	ea00001c	 b           |$cleanUp$46739|
  001ac		 |$LN10@OALArgsQue|

; 135  : 
; 136  :         case OAL_ARGS_QUERY_DEVID:
; 137  :             pData = s_deviceId;

  001ac	e1a04007	 mov         r4, r7

; 138  :             break;

  001b0	ea00001a	 b           |$cleanUp$46739|
  001b4		 |$LN6@OALArgsQue|

; 151  : 
; 152  :         case OAL_ARGS_QUERY_RNDISMAC:
; 153  :             pData = s_rndisMAC;

  001b4	e2844010	 add         r4, r4, #0x10

; 154  :             break;

  001b8	ea000018	 b           |$cleanUp$46739|
  001bc		 |$LN29@OALArgsQue|

; 118  :     }
; 119  : 
; 120  : 
; 121  :     // Depending on required args
; 122  :     switch (type)

  001bc	e3550044	 cmp         r5, #0x44
  001c0	0a000014	 beq         |$LN5@OALArgsQue|
  001c4	e3550046	 cmp         r5, #0x46
  001c8	0a000010	 beq         |$LN9@OALArgsQue|
  001cc	e3550047	 cmp         r5, #0x47
  001d0	0a00000b	 beq         |$LN4@OALArgsQue|
  001d4	e3550048	 cmp         r5, #0x48
  001d8	0a000006	 beq         |$LN3@OALArgsQue|
  001dc	e3550049	 cmp         r5, #0x49
  001e0	0a000001	 beq         |$LN2@OALArgsQue|
  001e4		 |$LN1@OALArgsQue|

; 171  :             
; 172  :         default:
; 173  :             pData = NULL;

  001e4	e3a04000	 mov         r4, #0

; 174  :             break;

  001e8	ea00000c	 b           |$cleanUp$46739|
  001ec		 |$LN2@OALArgsQue|
  001ec	e3a0320a	 mov         r3, #0xA, 4
  001f0	e3834068	 orr         r4, r3, #0x68
  001f4	ea000009	 b           |$cleanUp$46739|
  001f8		 |$LN3@OALArgsQue|

; 167  : 
; 168  :         case OAL_ARGS_QUERY_OPP_MODE:
; 169  :             pData = &pArgs->opp_mode;
; 170  :             break;            

  001f8	e3a0320a	 mov         r3, #0xA, 4
  001fc	e3834064	 orr         r4, r3, #0x64
  00200	ea000006	 b           |$cleanUp$46739|
  00204		 |$LN4@OALArgsQue|

; 158  :             break;
; 159  : 
; 160  :         case OAL_ARGS_QUERY_DISP_RES:
; 161  :             pData = &pArgs->dispRes;
; 162  :             break;
; 163  : 
; 164  :         case OAL_ARGS_QUERY_ECC_TYPE:
; 165  :             pData = &pArgs->ECCtype;
; 166  :             break;

  00204	e3a0320a	 mov         r3, #0xA, 4
  00208	e3834060	 orr         r4, r3, #0x60
  0020c	ea000003	 b           |$cleanUp$46739|
  00210		 |$LN9@OALArgsQue|

; 139  : 			
; 140  :         case OAL_ARGS_QUERY_DEVICE_PREFIX:
; 141  :             pData = &pArgs->DevicePrefix;

  00210	e38a4048	 orr         r4, r10, #0x48

; 142  :             break;

  00214	ea000001	 b           |$cleanUp$46739|
  00218		 |$LN5@OALArgsQue|
  00218	e3a0320a	 mov         r3, #0xA, 4

; 155  :             
; 156  :         case OAL_ARGS_QUERY_OALFLAGS:
; 157  :             pData = &pArgs->oalFlags;

  0021c	e3834044	 orr         r4, r3, #0x44
  00220		 |$cleanUp$46739|

; 175  :     }
; 176  : 
; 177  : cleanUp:
; 178  :     OALMSG(OAL_ARGS&&OAL_FUNC, (L"-OALArgsQuery(pData = 0x%08x)\r\n", pData));

  00220	e3180010	 tst         r8, #0x10
  00224	13180004	 tstne       r8, #4
  00228	159f0010	 ldrne       r0, [pc, #0x10]
  0022c	11a01004	 movne       r1, r4
  00230	1b000000	 blne        NKDbgPrintfW

; 179  :     return pData;
; 180  : }

  00234	e1a00004	 mov         r0, r4
  00238	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0023c	e12fff1e	 bx          lr
  00240		 |$LN37@OALArgsQue|
  00240		 |$LN38@OALArgsQue|
  00240	00000000	 DCD         |??_C@_1EA@DJGHLELP@?$AA?9?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00244		 |$LN39@OALArgsQue|
  00244	00000000	 DCD         |s_uuid|
  00248		 |$LN40@OALArgsQue|
  00248	00000000	 DCD         |s_deviceId|
  0024c		 |$LN41@OALArgsQue|
  0024c	53475241	 DCD         0x53475241
  00250		 |$LN42@OALArgsQue|
  00250	00000000	 DCD         |??_C@_1CI@CLMEBIJE@?$AA?$CL?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00254		 |$LN43@OALArgsQue|
  00254	00000000	 DCD         |dpCurSettings|
  00258		 |$M46814|

			 ENDP  ; |OALArgsQuery|

	END
