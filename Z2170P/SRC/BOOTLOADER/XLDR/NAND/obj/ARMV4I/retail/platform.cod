; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\XLDR\platform.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|OMAP35x_OPP_Table| [ DATA ]
	EXPORT	|OMAP37x_OPP_Table| [ DATA ]
	EXPORT	|BSP_DDR_device_params| [ DATA ]

  00000			 AREA	 |.data|, DATA
|OMAP35x_OPP_Table| DCD 0x7d
	DCD	0x5a
	DCD	0x1e
	DCD	0x2c
	DCD	0xfa
	DCD	0xb4
	DCD	0x20
	DCD	0x2c
	DCD	0x1f4
	DCD	0x168
	DCD	0x30
	DCD	0x2c
	DCD	0x226
	DCD	0x190
	DCD	0x36
	DCD	0x2c
	DCD	0x258
	DCD	0x1ae
	DCD	0x3c
	DCD	0x2c
	DCD	0x2d0
	DCD	0x208
	DCD	0x3c
	DCD	0x2c
|OMAP37x_OPP_Table| DCD 0x12c
	DCD	0x104
	DCD	0x1b
	DCD	0x2b
	DCD	0x258
	DCD	0x208
	DCD	0x28
	DCD	0x2b
	DCD	0x320
	DCD	0x294
	DCD	0x35
	DCD	0x2b
	DCD	0x3e8
	DCD	0x320
	DCD	0x3e
	DCD	0x2b
|BSP_DDR_device_params| DCD 0x2584099
	DCD	0x2584099
	DCD	0xaa9db4c6
	DCD	0x2014
	DCD	0xaa9db4c6
	DCD	0x2014
	DCD	0x4e201
	DCD	0x4e201
	DCD	0x3588099
	DCD	0x3580099
	DCD	0xa2e1b4c6
	DCD	0x2131c
	DCD	0xa2e1b4c6
	DCD	0x2131c
	DCD	0x5e601
	DCD	0x5e601

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|?initialPinMux@?1??PinMuxSetup@@9@9| DCW 0x0		; `PinMuxSetup'::`2'::initialPinMux
	%	2
	DCD	0x1
	DCW	0x1
	%	2
	DCD	0x1
	DCW	0x2
	%	2
	DCD	0x1
	DCW	0x3
	%	2
	DCD	0x1
	DCW	0x4
	%	2
	DCD	0x1
	DCW	0x5
	%	2
	DCD	0x1
	DCW	0x6
	%	2
	DCD	0x1
	DCW	0x7
	%	2
	DCD	0x1
	DCW	0x8
	%	2
	DCD	0x1
	DCW	0x9
	%	2
	DCD	0x1
	DCW	0xa
	%	2
	DCD	0x1
	DCW	0xb
	%	2
	DCD	0x1
	DCW	0xc
	%	2
	DCD	0x1
	DCW	0xd
	%	2
	DCD	0x1
	DCW	0xe
	%	2
	DCD	0x1
	DCW	0xf
	%	2
	DCD	0x1
	DCW	0x10
	%	2
	DCD	0x1
	DCW	0x11
	%	2
	DCD	0x1
	DCW	0x12
	%	2
	DCD	0x1
	DCW	0x13
	%	2
	DCD	0x1
	DCW	0x14
	%	2
	DCD	0x1
	DCW	0x15
	%	2
	DCD	0x1
	DCW	0x16
	%	2
	DCD	0x1
	DCW	0x17
	%	2
	DCD	0x1
	DCW	0x18
	%	2
	DCD	0x1
	DCW	0x19
	%	2
	DCD	0x1
	DCW	0x1a
	%	2
	DCD	0x1
	DCW	0x1b
	%	2
	DCD	0x1
	DCW	0x1c
	%	2
	DCD	0x1
	DCW	0x1d
	%	2
	DCD	0x1
	DCW	0x1e
	%	2
	DCD	0x1
	DCW	0x1f
	%	2
	DCD	0x1
	DCW	0x20
	%	2
	DCD	0x1
	DCW	0x21
	%	2
	DCD	0x1
	DCW	0x22
	%	2
	DCD	0x1
	DCW	0x23
	%	2
	DCD	0x1
	DCW	0x24
	%	2
	DCD	0x1
	DCW	0x119
	%	2
	DCD	0x1
	DCW	0x11a
	%	2
	DCD	0x1
	DCW	0x25
	%	2
	DCD	0x0
	DCW	0x26
	%	2
	DCD	0x0
	DCW	0x27
	%	2
	DCD	0x0
	DCW	0x28
	%	2
	DCD	0x0
	DCW	0x29
	%	2
	DCD	0x0
	DCW	0x2a
	%	2
	DCD	0x0
	DCW	0x2b
	%	2
	DCD	0x0
	DCW	0x2c
	%	2
	DCD	0x0
	DCW	0x2d
	%	2
	DCD	0x0
	DCW	0x2e
	%	2
	DCD	0x0
	DCW	0x2f
	%	2
	DCD	0x1
	DCW	0x30
	%	2
	DCD	0x1
	DCW	0x31
	%	2
	DCD	0x1
	DCW	0x32
	%	2
	DCD	0x1
	DCW	0x33
	%	2
	DCD	0x1
	DCW	0x34
	%	2
	DCD	0x1
	DCW	0x35
	%	2
	DCD	0x1
	DCW	0x36
	%	2
	DCD	0x1
	DCW	0x37
	%	2
	DCD	0x1
	DCW	0x38
	%	2
	DCD	0x1
	DCW	0x39
	%	2
	DCD	0x1
	DCW	0x3a
	%	2
	DCD	0x1
	DCW	0x3b
	%	2
	DCD	0x1
	DCW	0x3c
	%	2
	DCD	0x1
	DCW	0x3d
	%	2
	DCD	0x1
	DCW	0x3e
	%	2
	DCD	0x1
	DCW	0x3f
	%	2
	DCD	0x0
	DCW	0x40
	%	2
	DCD	0x0
	DCW	0x41
	%	2
	DCD	0x0
	DCW	0x42
	%	2
	DCD	0x0
	DCW	0x44
	%	2
	DCD	0x0
	DCW	0x46
	%	2
	DCD	0x0
	DCW	0x47
	%	2
	DCD	0x0
	DCW	0x48
	%	2
	DCD	0x0
	DCW	0x49
	%	2
	DCD	0x0
	DCW	0x4a
	%	2
	DCD	0x0
	DCW	0x4b
	%	2
	DCD	0x0
	DCW	0x4d
	%	2
	DCD	0x0
	DCW	0x4e
	%	2
	DCD	0x7
	DCW	0x4f
	%	2
	DCD	0x21
	DCW	0xb8
	%	2
	DCD	0x0
	DCW	0xb6
	%	2
	DCD	0x0
	DCW	0xb5
	%	2
	DCD	0x1
	DCW	0xb7
	%	2
	DCD	0x1
	DCW	0x8a
	%	2
	DCD	0x7
	DCW	0x8b
	%	2
	DCD	0x1
	DCW	0x8c
	%	2
	DCD	0x7
	DCW	0x8d
	%	2
	DCD	0x7
	DCW	0x8e
	%	2
	DCD	0x7
	DCW	0x8f
	%	2
	DCD	0x7
	DCW	0xc5
	%	2
	DCD	0x1
	DCW	0xc6
	%	2
	DCD	0x1
	DCW	0xc7
	%	2
	DCD	0x1
	DCW	0xc8
	%	2
	DCD	0x1
	DCW	0xc9
	%	2
	DCD	0x1
	DCW	0xca
	%	2
	DCD	0x1
	DCW	0x518
	%	2
	DCD	0x1
	DCW	0x82
	%	2
	DCD	0x21
	DCW	0x84
	%	2
	DCD	0x21
	DCW	0x85
	%	2
	DCD	0x21
	DCW	0x9a
	%	2
	DCD	0x20
	DCW	0x2d8
	%	2
	DCD	0x20
	DCW	0x2d7
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x28
	%	2
	DCD	0x20
	DCW	0x29
	%	2
	DCD	0x20
	DCW	0xffff
	%	2
	DCD	0x0
	IMPORT	|SOCSetPadConfig|
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T46840| DCD	|$LN9@ConfigureP|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigurePadArray| PROC

; 581  : {

  00000		 |$LN9@ConfigureP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M46837|
  00004	e1a04000	 mov         r4, r0

; 582  :     int i=0;
; 583  :     while (padArray[i].padID != (UINT16) -1)

  00008	e1d420b0	 ldrh        r2, [r4]
  0000c	e3a03cff	 mov         r3, #0xFF, 24
  00010	e38350ff	 orr         r5, r3, #0xFF
  00014	e1520005	 cmp         r2, r5
  00018	e3a06000	 mov         r6, #0
  0001c	0a00000b	 beq         |$LN1@ConfigureP|
  00020	e3a01c7f	 mov         r1, #0x7F, 24
  00024	e38170ff	 orr         r7, r1, #0xFF
  00028	e1a03004	 mov         r3, r4
  0002c		 |$LL2@ConfigureP|

; 584  :     {
; 585  :         SOCSetPadConfig(padArray[i].padID,(UINT16) padArray[i].Cfg);

  0002c	e5933004	 ldr         r3, [r3, #4]
  00030	e1a00002	 mov         r0, r2
  00034	e0031007	 and         r1, r3, r7
  00038	eb000000	 bl          SOCSetPadConfig

; 586  :         i++;

  0003c	e2866001	 add         r6, r6, #1
  00040	e0843186	 add         r3, r4, r6, lsl #3
  00044	e1d320b0	 ldrh        r2, [r3]
  00048	e1520005	 cmp         r2, r5
  0004c	1afffff6	 bne         |$LL2@ConfigureP|
  00050		 |$LN1@ConfigureP|

; 587  :     }
; 588  : }

  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M46838|

			 ENDP  ; |ConfigurePadArray|

; File c:\wince600\platform\z2170p\src\bootloader\xldr\platform.c

  00000			 AREA	 |.pdata|, PDATA
|$T46862| DCD	|$LN15@WaitOnValu|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WaitOnValue| PROC

; 145  : {

  00000		 |$LN15@WaitOnValu|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46859|

; 146  : 	UINT32 i = 0, val;
; 147  : 	for(;;)
; 148  : 	{
; 149  : 		i++;
; 150  : 		val = INREG32(readAddr) & readBitMask;

  00004	e3a04001	 mov         r4, #1
  00008	ea000002	 b           |$LN12@WaitOnValu|
  0000c		 |$LL4@WaitOnValu|

; 153  : 		if (i == bound)

  0000c	e1540003	 cmp         r4, r3
  00010	0a000007	 beq         |$LN10@WaitOnValu|
  00014	e2844001	 add         r4, r4, #1
  00018		 |$LN12@WaitOnValu|
  00018	e592e000	 ldr         lr, [r2]
  0001c	e00ee000	 and         lr, lr, r0
  00020	e15e0001	 cmp         lr, r1
  00024	1afffff8	 bne         |$LL4@WaitOnValu|

; 151  : 		if (val == matchValue)
; 152  : 			return 1;

  00028	e3a00001	 mov         r0, #1

; 155  : 	} 
; 156  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN10@WaitOnValu|

; 154  : 			return 0;

  00034	e3a00000	 mov         r0, #0

; 155  : 	} 
; 156  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M46860|

			 ENDP  ; |WaitOnValue|

	EXPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T46871| DCD	|$LN5@OALGetTick|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGetTickCount| PROC

; 166  : {

  00000		 |$LN5@OALGetTick|
  00000		 |$M46868|

; 167  :     return 1;

  00000	e3a00001	 mov         r0, #1

; 168  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46869|

			 ENDP  ; |OALGetTickCount|

	EXPORT	|Mpu_dpll_init|
	IMPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T46883| DCD	|$LN11@Mpu_dpll_i|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Mpu_dpll_init| PROC

; 177  : {

  00000		 |$LN11@Mpu_dpll_i|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46880|
  00004	e1a04000	 mov         r4, r0
  00008	e3a03312	 mov         r3, #0x12, 6

; 178  :     OMAP_PRCM_MPU_CM_REGS* pPrcmMpuCM = OALPAtoUA(OMAP_PRCM_MPU_CM_REGS_PA);

  0000c	e3830c49	 orr         r0, r3, #0x49, 24
  00010	e3a01000	 mov         r1, #0
  00014	eb000000	 bl          OALPAtoVA

; 179  :     unsigned int val, mpu_mult;
; 180  : 
; 181  :     // put mpu dpll in bypass
; 182  :     val = INREG32(&pPrcmMpuCM->CM_CLKEN_PLL_MPU);

  00018	e5903004	 ldr         r3, [r0, #4]

; 183  :     val &= ~DPLL_MODE_MASK;
; 184  :     val |= DPLL_MODE_LOWPOWER_BYPASS;

  0001c	e3c33007	 bic         r3, r3, #7
  00020	e3833005	 orr         r3, r3, #5

; 185  :     OUTREG32(&pPrcmMpuCM->CM_CLKEN_PLL_MPU, val);

  00024	e5803004	 str         r3, [r0, #4]
  00028		 |$LL4@Mpu_dpll_i|

; 186  :     while ((INREG32(&pPrcmMpuCM->CM_IDLEST_PLL_MPU) & DPLL_STATUS_MASK) != DPLL_STATUS_BYPASSED);

  00028	e5903024	 ldr         r3, [r0, #0x24]
  0002c	e3130001	 tst         r3, #1
  00030	1afffffc	 bne         |$LL4@Mpu_dpll_i|

; 187  : 
; 188  :     // setup DPLL1 divider
; 189  :     OUTREG32(&pPrcmMpuCM->CM_CLKSEL2_PLL_MPU, BSP_CM_CLKSEL2_PLL_MPU);

  00034	e3a03001	 mov         r3, #1
  00038	e5803044	 str         r3, [r0, #0x44]

; 190  :     
; 191  :     // configure m:n clock ratios as well as frequency selection for mpu dpll
; 192  :     mpu_mult = ((opp_setting->MPUSpeed / 2) << 8);
; 193  :     val = BSP_MPU_CLK_SRC | mpu_mult | BSP_MPU_DPLL_DIV;
; 194  :     OUTREG32(&pPrcmMpuCM->CM_CLKSEL1_PLL_MPU, val);

  0003c	e5943000	 ldr         r3, [r4]
  00040	e3a01601	 mov         r1, #1, 12
  00044	e3c32001	 bic         r2, r3, #1
  00048	e381300c	 orr         r3, r1, #0xC
  0004c	e1833382	 orr         r3, r3, r2, lsl #7
  00050	e3a02c02	 mov         r2, #2, 24
  00054	e5803040	 str         r3, [r0, #0x40]

; 195  : 
; 196  :     // lock dpll with correct frequency selection
; 197  :     OUTREG32(&pPrcmMpuCM->CM_CLKEN_PLL_MPU, BSP_CM_CLKEN_PLL_MPU);

  00058	e3823077	 orr         r3, r2, #0x77
  0005c	e5803004	 str         r3, [r0, #4]
  00060		 |$LL2@Mpu_dpll_i|

; 198  :     while ((INREG32(&pPrcmMpuCM->CM_IDLEST_PLL_MPU) & DPLL_STATUS_MASK) != DPLL_STATUS_LOCKED);

  00060	e5903024	 ldr         r3, [r0, #0x24]
  00064	e2033001	 and         r3, r3, #1
  00068	e3530001	 cmp         r3, #1
  0006c	1afffffb	 bne         |$LL2@Mpu_dpll_i|

; 199  : }    

  00070	e8bd4010	 ldmia       sp!, {r4, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M46881|

			 ENDP  ; |Mpu_dpll_init|

	EXPORT	|Iva_dpll_init|
	IMPORT	|gCPU_family|

  00000			 AREA	 |.pdata|, PDATA
|$T46896| DCD	|$LN13@Iva_dpll_i|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Iva_dpll_init| PROC

; 209  : {

  00000		 |$LN13@Iva_dpll_i|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46893|
  00004	e1a04000	 mov         r4, r0
  00008	e3a03312	 mov         r3, #0x12, 6

; 210  :     OMAP_PRCM_IVA2_CM_REGS* pPrcmIvaCM = OALPAtoUA(OMAP_PRCM_IVA2_CM_REGS_PA);

  0000c	e3830901	 orr         r0, r3, #1, 18
  00010	e3a01000	 mov         r1, #0
  00014	eb000000	 bl          OALPAtoVA

; 211  :     unsigned int val, iva_mult;
; 212  : 
; 213  :     //---------------------------------
; 214  :     // setup dpll timings for iva2 dpll
; 215  :     //
; 216  : 
; 217  :     // put iva2 dpll in bypass
; 218  :     val = INREG32(&pPrcmIvaCM->CM_CLKEN_PLL_IVA2);

  00018	e5903004	 ldr         r3, [r0, #4]

; 219  : 
; 220  :     val &= ~DPLL_MODE_MASK;
; 221  :     val |= DPLL_MODE_LOWPOWER_BYPASS;

  0001c	e3c33007	 bic         r3, r3, #7
  00020	e3833005	 orr         r3, r3, #5

; 222  :     OUTREG32(&pPrcmIvaCM->CM_CLKEN_PLL_IVA2, val);

  00024	e5803004	 str         r3, [r0, #4]
  00028		 |$LL6@Iva_dpll_i|

; 223  :     while ((INREG32(&pPrcmIvaCM->CM_IDLEST_PLL_IVA2) & DPLL_STATUS_MASK) != DPLL_STATUS_BYPASSED);

  00028	e5903024	 ldr         r3, [r0, #0x24]
  0002c	e3130001	 tst         r3, #1
  00030	1afffffc	 bne         |$LL6@Iva_dpll_i|

; 224  : 
; 225  :     // setup DPLL1 divider
; 226  :     OUTREG32(&pPrcmIvaCM->CM_CLKSEL2_PLL_IVA2, BSP_CM_CLKSEL2_PLL_IVA2);

  00034	e3a03001	 mov         r3, #1
  00038	e5803044	 str         r3, [r0, #0x44]

; 227  :     
; 228  :     // configure m:n clock ratios as well as frequency selection for iva dpll
; 229  :     iva_mult = ((opp_setting->IVASpeed/ 2) << 8);
; 230  :     val = BSP_3530_IVA2_CLK_SRC | iva_mult | BSP_IVA2_DPLL_DIV;
; 231  :     OUTREG32(&pPrcmIvaCM->CM_CLKSEL1_PLL_IVA2, val);

  0003c	e5943004	 ldr         r3, [r4, #4]
  00040	e3a01601	 mov         r1, #1, 12
  00044	e3c32001	 bic         r2, r3, #1
  00048	e381300c	 orr         r3, r1, #0xC

; 232  : 
; 233  :     // lock dpll with correct frequency selection
; 234  :     if(gCPU_family == CPU_FAMILY_DM37XX)

  0004c	e59f1034	 ldr         r1, [pc, #0x34]
  00050	e1833382	 orr         r3, r3, r2, lsl #7
  00054	e5803040	 str         r3, [r0, #0x40]
  00058	e5913000	 ldr         r3, [r1]
  0005c	e3530001	 cmp         r3, #1

; 235  :     {
; 236  :         //val = (BSP_EN_IVA2_DPLL_LPMODE | BSP_EN_IVA2_DPLL_DRIFTGUARD | BSP_EN_IVA2_DPLL);
; 237  :         val = (BSP_EN_IVA2_DPLL_LPMODE | BSP_EN_IVA2_DPLL);

  00060	03a03007	 moveq       r3, #7

; 238  :     }
; 239  :     else

  00064	13a03c02	 movne       r3, #2, 24

; 240  :     {
; 241  :         val = BSP_CM_CLKEN_PLL_IVA2;

  00068	13833077	 orrne       r3, r3, #0x77

; 242  :     }
; 243  :     OUTREG32(&pPrcmIvaCM->CM_CLKEN_PLL_IVA2, val);

  0006c	e5803004	 str         r3, [r0, #4]
  00070		 |$LL2@Iva_dpll_i|

; 244  :     while ((INREG32(&pPrcmIvaCM->CM_IDLEST_PLL_IVA2) & DPLL_STATUS_MASK) != DPLL_STATUS_LOCKED);

  00070	e5903024	 ldr         r3, [r0, #0x24]
  00074	e2033001	 and         r3, r3, #1
  00078	e3530001	 cmp         r3, #1
  0007c	1afffffb	 bne         |$LL2@Iva_dpll_i|

; 245  : 
; 246  : }

  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN14@Iva_dpll_i|
  00088		 |$LN15@Iva_dpll_i|
  00088	00000000	 DCD         |gCPU_family|
  0008c		 |$M46894|

			 ENDP  ; |Iva_dpll_init|

	EXPORT	|Omap37xx_dpll4_init|

  00000			 AREA	 |.pdata|, PDATA
|$T46910| DCD	|$LN8@Omap37xx_d|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Omap37xx_dpll4_init| PROC

; 255  : {

  00000		 |$LN8@Omap37xx_d|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46907|
  00004	e3a06312	 mov         r6, #0x12, 6

; 256  :     OMAP_PRCM_EMU_CM_REGS* pPrcmEmuCM = OALPAtoUA(OMAP_PRCM_EMU_CM_REGS_PA);

  00008	e3860c51	 orr         r0, r6, #0x51, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a05000	 mov         r5, r0

; 257  :     OMAP_PRCM_CAM_CM_REGS* pPrcmCamCM = OALPAtoUA(OMAP_PRCM_CAM_CM_REGS_PA);

  00018	e3860c4f	 orr         r0, r6, #0x4F, 24
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA
  00024	e1a04000	 mov         r4, r0

; 258  :     OMAP_PRCM_CLOCK_CONTROL_CM_REGS* pPrcmClkCM = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA);

  00028	e3860c4d	 orr         r0, r6, #0x4D, 24
  0002c	e3a01000	 mov         r1, #0
  00030	eb000000	 bl          OALPAtoVA

; 259  :     //OMAP_PRCM_SGX_CM_REGS* pPrcmSgxCM = OALPAtoUA(OMAP_PRCM_SGX_CM_REGS_PA);	
; 260  :     unsigned int val;
; 261  :     
; 262  : 
; 263  :     // configure timings for all related peripherals
; 264  :     OUTREG32(&pPrcmEmuCM->CM_CLKSEL1_EMU, BSP_CM_CLKSEL1_EMU);

  00034	e59f3054	 ldr         r3, [pc, #0x54]

; 265  :     OUTREG32(&pPrcmCamCM->CM_CLKSEL_CAM, BSP_CM_CLKSEL_CAM);
; 266  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL3_PLL, BSP_CM_CLKSEL3_PLL);
; 267  :     //OUTREG32(&pPrcmSgxCM->CM_CLKSEL_SGX, BSP_CM_CLKSEL_SGX);
; 268  : 	
; 269  :     /* Omap37xx using low jitter DPLL, the output freq is one half of OMAP 35xx DPLL4 */
; 270  :     val = INREG32(&pPrcmClkCM->CM_CLKSEL2_PLL) & 0xfff00000;

  00038	e3a01a1b	 mov         r1, #0x1B, 20
  0003c	e5853040	 str         r3, [r5, #0x40]
  00040	e3a03004	 mov         r3, #4
  00044	e5843040	 str         r3, [r4, #0x40]
  00048	e3a03009	 mov         r3, #9
  0004c	e5803048	 str         r3, [r0, #0x48]
  00050	e5902044	 ldr         r2, [r0, #0x44]
  00054	e3a034ff	 mov         r3, #0xFF, 8
  00058	e383360f	 orr         r3, r3, #0xF, 12
  0005c	e0022003	 and         r2, r2, r3

; 271  : 
; 272  :     val |= (BSP_PERIPH_DPLL_MULT_37xx | BSP_PERIPH_DPLL_DIV);

  00060	e381300c	 orr         r3, r1, #0xC
  00064	e1823003	 orr         r3, r2, r3
  00068	e3a02877	 mov         r2, #0x77, 16

; 273  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL2_PLL, val);

  0006c	e5803044	 str         r3, [r0, #0x44]

; 274  :     
; 275  :     // lock dpll with correct frequency selection
; 276  :     val =   BSP_CM_CLKEN_PLL & (~(7 << 4));
; 277  :  
; 278  :     OUTREG32(&pPrcmClkCM->CM_CLKEN_PLL, val);

  00070	e3823007	 orr         r3, r2, #7
  00074	e4803020	 str         r3, [r0], #0x20
  00078		 |$LL2@Omap37xx_d|

; 279  :     while ((INREG32(&pPrcmClkCM->CM_IDLEST_CKGEN) & DPLL_STATUS_MASK) != DPLL_STATUS_LOCKED);

  00078	e5903000	 ldr         r3, [r0]
  0007c	e2033001	 and         r3, r3, #1
  00080	e3530001	 cmp         r3, #1
  00084	1afffffb	 bne         |$LL2@Omap37xx_d|

; 280  : 
; 281  : }

  00088	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN9@Omap37xx_d|
  00090		 |$LN10@Omap37xx_d|
  00090	03020a50	 DCD         0x3020a50
  00094		 |$M46908|

			 ENDP  ; |Omap37xx_dpll4_init|

	EXPORT	|Dpll4_init|

  00000			 AREA	 |.pdata|, PDATA
|$T46923| DCD	|$LN8@Dpll4_init|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Dpll4_init| PROC

; 290  : {

  00000		 |$LN8@Dpll4_init|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46920|
  00004	e3a06312	 mov         r6, #0x12, 6

; 291  :     OMAP_PRCM_EMU_CM_REGS* pPrcmEmuCM = OALPAtoUA(OMAP_PRCM_EMU_CM_REGS_PA);

  00008	e3860c51	 orr         r0, r6, #0x51, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a05000	 mov         r5, r0

; 292  :     OMAP_PRCM_CAM_CM_REGS* pPrcmCamCM = OALPAtoUA(OMAP_PRCM_CAM_CM_REGS_PA);

  00018	e3860c4f	 orr         r0, r6, #0x4F, 24
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA
  00024	e1a04000	 mov         r4, r0

; 293  :     OMAP_PRCM_CLOCK_CONTROL_CM_REGS* pPrcmClkCM = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA);

  00028	e3860c4d	 orr         r0, r6, #0x4D, 24
  0002c	e3a01000	 mov         r1, #0
  00030	eb000000	 bl          OALPAtoVA

; 294  : 
; 295  :     // configure timings for all related peripherals
; 296  :     OUTREG32(&pPrcmEmuCM->CM_CLKSEL1_EMU, BSP_CM_CLKSEL1_EMU);

  00034	e59f3054	 ldr         r3, [pc, #0x54]

; 297  :     OUTREG32(&pPrcmCamCM->CM_CLKSEL_CAM, BSP_CM_CLKSEL_CAM);
; 298  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL3_PLL, BSP_CM_CLKSEL3_PLL);
; 299  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL2_PLL, (INREG32(&pPrcmClkCM->CM_CLKSEL2_PLL) & 0xfff00000) | BSP_CM_CLKSEL2_PLL);

  00038	e3a01b36	 mov         r1, #0x36, 22
  0003c	e5853040	 str         r3, [r5, #0x40]
  00040	e3a03004	 mov         r3, #4
  00044	e5843040	 str         r3, [r4, #0x40]
  00048	e3a03009	 mov         r3, #9
  0004c	e5803048	 str         r3, [r0, #0x48]
  00050	e5902044	 ldr         r2, [r0, #0x44]
  00054	e3a034ff	 mov         r3, #0xFF, 8
  00058	e383360f	 orr         r3, r3, #0xF, 12
  0005c	e0022003	 and         r2, r2, r3
  00060	e381300c	 orr         r3, r1, #0xC
  00064	e1823003	 orr         r3, r2, r3
  00068	e3a02877	 mov         r2, #0x77, 16
  0006c	e5803044	 str         r3, [r0, #0x44]

; 300  : 
; 301  :     // lock dpll with correct frequency selection
; 302  :     OUTREG32(&pPrcmClkCM->CM_CLKEN_PLL, BSP_CM_CLKEN_PLL);

  00070	e3823077	 orr         r3, r2, #0x77
  00074	e4803020	 str         r3, [r0], #0x20
  00078		 |$LL2@Dpll4_init|

; 303  :     while ((INREG32(&pPrcmClkCM->CM_IDLEST_CKGEN) & DPLL_STATUS_MASK) != DPLL_STATUS_LOCKED);

  00078	e5903000	 ldr         r3, [r0]
  0007c	e2033001	 and         r3, r3, #1
  00080	e3530001	 cmp         r3, #1
  00084	1afffffb	 bne         |$LL2@Dpll4_init|

; 304  : 
; 305  : }

  00088	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN9@Dpll4_init|
  00090		 |$LN10@Dpll4_init|
  00090	03020a50	 DCD         0x3020a50
  00094		 |$M46921|

			 ENDP  ; |Dpll4_init|

	EXPORT	|Omap37xx_core_dpll_init|

  00000			 AREA	 |.pdata|, PDATA
|$T46934| DCD	|$LN5@Omap37xx_c|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Omap37xx_core_dpll_init| PROC

; 314  : {

  00000		 |$LN5@Omap37xx_c|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46931|
  00004	e3a05312	 mov         r5, #0x12, 6

; 315  :     OMAP_PRCM_CORE_CM_REGS* pPrcmCoreCM = OALPAtoUA(OMAP_PRCM_CORE_CM_REGS_PA);

  00008	e3850c4a	 orr         r0, r5, #0x4A, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a04000	 mov         r4, r0

; 316  :     OMAP_PRCM_CLOCK_CONTROL_CM_REGS* pPrcmClkCM = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA);

  00018	e3850c4d	 orr         r0, r5, #0x4D, 24
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA

; 317  : 
; 318  :     //---------------------------------
; 319  :     // setup dpll timings for core and peripheral dpll
; 320  :     //
; 321  :     
; 322  :     // configure clock ratios for L3, L4, FSHOSTUSB, SSI
; 323  :     // configure clock selection for gpt10, gpt11
; 324  :     OUTREG32(&pPrcmCoreCM->CM_CLKSEL_CORE, BSP_CM_CLKSEL_CORE);
; 325  :     //OUTREG32(&pPrcmCoreCM->CM_FCLKEN1_CORE, 0x1 <<13);
; 326  : 
; 327  :     // configure m:n clock ratios as well as frequency selection for core dpll
; 328  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL1_PLL, (BSP_CORE_DPLL_CLKOUT_DIV | CORE_DPLL_MULT_400 | \
; 329  :                                                                         CORE_DPLL_DIV_400 | BSP_SOURCE_96M));

  00024	e59f2014	 ldr         r2, [pc, #0x14]
  00028	e3a03c13	 mov         r3, #0x13, 24
  0002c	e383300a	 orr         r3, r3, #0xA
  00030	e5843040	 str         r3, [r4, #0x40]
  00034	e5802040	 str         r2, [r0, #0x40]

; 330  : 
; 331  : }

  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN6@Omap37xx_c|
  00040		 |$LN7@Omap37xx_c|
  00040	08c80c00	 DCD         0x8c80c00
  00044		 |$M46932|

			 ENDP  ; |Omap37xx_core_dpll_init|

	EXPORT	|Core_dpll_init|

  00000			 AREA	 |.pdata|, PDATA
|$T46945| DCD	|$LN5@Core_dpll_|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Core_dpll_init| PROC

; 340  : {

  00000		 |$LN5@Core_dpll_|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46942|
  00004	e3a05312	 mov         r5, #0x12, 6

; 341  :     OMAP_PRCM_CORE_CM_REGS* pPrcmCoreCM = OALPAtoUA(OMAP_PRCM_CORE_CM_REGS_PA);

  00008	e3850c4a	 orr         r0, r5, #0x4A, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a04000	 mov         r4, r0

; 342  :     OMAP_PRCM_CLOCK_CONTROL_CM_REGS* pPrcmClkCM = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA);

  00018	e3850c4d	 orr         r0, r5, #0x4D, 24
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA

; 343  : 
; 344  :     //---------------------------------
; 345  :     // setup dpll timings for core and peripheral dpll
; 346  :     //
; 347  :     
; 348  :     // configure clock ratios for L3, L4, FSHOSTUSB, SSI
; 349  :     // configure clock selection for gpt10, gpt11
; 350  :     OUTREG32(&pPrcmCoreCM->CM_CLKSEL_CORE, BSP_CM_CLKSEL_CORE);
; 351  :     
; 352  :     // configure m:n clock ratios as well as frequency selection for core dpll
; 353  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL1_PLL, BSP_CM_CLKSEL1_PLL);

  00024	e59f2014	 ldr         r2, [pc, #0x14]
  00028	e3a03c13	 mov         r3, #0x13, 24
  0002c	e383300a	 orr         r3, r3, #0xA
  00030	e5843040	 str         r3, [r4, #0x40]
  00034	e5802040	 str         r2, [r0, #0x40]

; 354  : 
; 355  : }

  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN6@Core_dpll_|
  00040		 |$LN7@Core_dpll_|
  00040	08a60c00	 DCD         0x8a60c00
  00044		 |$M46943|

			 ENDP  ; |Core_dpll_init|

	EXPORT	|Per_dpll_init|

  00000			 AREA	 |.pdata|, PDATA
|$T46956| DCD	|$LN8@Per_dpll_i|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Per_dpll_init| PROC

; 363  : {

  00000		 |$LN8@Per_dpll_i|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46953|
  00004	e3a03312	 mov         r3, #0x12, 6

; 364  : 
; 365  :     OMAP_PRCM_CLOCK_CONTROL_CM_REGS* pPrcmClkCM = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA);

  00008	e3830c4d	 orr         r0, r3, #0x4D, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 366  : 
; 367  :     //---------------------------------
; 368  :     // setup dpll timings for core and peripheral dpll
; 369  :     //
; 370  :     
; 371  :     // configure clock ratios for 120m
; 372  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL5_PLL, BSP_CM_CLKSEL5_PLL);

  00014	e3a03001	 mov         r3, #1
  00018	e3a02b0f	 mov         r2, #0xF, 22
  0001c	e5803050	 str         r3, [r0, #0x50]

; 373  :     
; 374  :     // configure m:n clock ratios as well as frequency selection for core dpll
; 375  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL4_PLL, BSP_CM_CLKSEL4_PLL);

  00020	e382300c	 orr         r3, r2, #0xC
  00024	e580304c	 str         r3, [r0, #0x4C]

; 376  : 
; 377  :     // lock dpll with correct frequency selection
; 378  :     OUTREG32(&pPrcmClkCM->CM_CLKEN2_PLL, BSP_CM_CLKEN2_PLL);

  00028	e3a03077	 mov         r3, #0x77
  0002c	e5803004	 str         r3, [r0, #4]
  00030		 |$LL2@Per_dpll_i|

; 379  :     while ((INREG32(&pPrcmClkCM->CM_IDLEST2_CKGEN) & DPLL_STATUS_MASK) != DPLL_STATUS_LOCKED);

  00030	e5903024	 ldr         r3, [r0, #0x24]
  00034	e2033001	 and         r3, r3, #1
  00038	e3530001	 cmp         r3, #1
  0003c	1afffffb	 bne         |$LL2@Per_dpll_i|

; 380  :     
; 381  : 
; 382  : }

  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$M46954|

			 ENDP  ; |Per_dpll_init|

	EXPORT	|Omap37xx_per_dpll_init|

  00000			 AREA	 |.pdata|, PDATA
|$T46965| DCD	|$LN8@Omap37xx_p|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Omap37xx_per_dpll_init| PROC

; 391  : {

  00000		 |$LN8@Omap37xx_p|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46962|
  00004	e3a03312	 mov         r3, #0x12, 6

; 392  : 
; 393  :     OMAP_PRCM_CLOCK_CONTROL_CM_REGS* pPrcmClkCM = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA);

  00008	e3830c4d	 orr         r0, r3, #0x4D, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 394  :     unsigned int val;
; 395  : 
; 396  :     //---------------------------------
; 397  :     // setup dpll timings for core and peripheral dpll
; 398  :     //
; 399  :     
; 400  :     // configure clock ratios for 120m
; 401  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL5_PLL, BSP_CM_CLKSEL5_PLL);

  00014	e3a03001	 mov         r3, #1
  00018	e3a02b0f	 mov         r2, #0xF, 22
  0001c	e5803050	 str         r3, [r0, #0x50]

; 402  :     
; 403  :     // configure m:n clock ratios as well as frequency selection for core dpll
; 404  :     OUTREG32(&pPrcmClkCM->CM_CLKSEL4_PLL, BSP_CM_CLKSEL4_PLL);

  00020	e382300c	 orr         r3, r2, #0xC
  00024	e580304c	 str         r3, [r0, #0x4C]

; 405  : 
; 406  :     // lock dpll with correct frequency selection
; 407  : /*    val = (BSP_EN_PERIPH2_DPLL_LPMODE |  BSP_PERIPH2_DPLL_RAMPTIME |       \
; 408  :              BSP_EN_PERIPH2_DPLL_DRIFTGUARD |  BSP_EN_PERIPH2_DPLL);*/
; 409  :     val = (BSP_EN_PERIPH2_DPLL_LPMODE |  BSP_PERIPH2_DPLL_RAMPTIME |       \
; 410  :            BSP_EN_PERIPH2_DPLL);
; 411  :                  
; 412  :              
; 413  :     OUTREG32(&pPrcmClkCM->CM_CLKEN2_PLL, val);

  00028	e3a03007	 mov         r3, #7
  0002c	e5803004	 str         r3, [r0, #4]
  00030		 |$LL2@Omap37xx_p|

; 414  :     while ((INREG32(&pPrcmClkCM->CM_IDLEST2_CKGEN) & DPLL_STATUS_MASK) != DPLL_STATUS_LOCKED);

  00030	e5903024	 ldr         r3, [r0, #0x24]
  00034	e2033001	 and         r3, r3, #1
  00038	e3530001	 cmp         r3, #1
  0003c	1afffffb	 bne         |$LL2@Omap37xx_p|

; 415  : }

  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$M46963|

			 ENDP  ; |Omap37xx_per_dpll_init|


  00000			 AREA	 |.pdata|, PDATA
|$T46996| DCD	|$LN21@WatchdogSe|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WatchdogSetup| PROC

; 469  : {

  00000		 |$LN21@WatchdogSe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46993|
  00004	e3a05312	 mov         r5, #0x12, 6

; 470  : 	/* There are 3 watch dogs WD1=Secure, WD2=MPU, WD3=IVA. WD1 is
; 471  : 	either taken care of by ROM (HS/EMU) or not accessible (GP).
; 472  : 	We need to take care of WD2-MPU or take a PRCM reset. WD3
; 473  : 	should not be running and does not generate a PRCM reset. */
; 474  : 
; 475  : 	OMAP_PRCM_WKUP_CM_REGS *pPrcmWkupCM = OALPAtoUA(OMAP_PRCM_WKUP_CM_REGS_PA);

  00008	e3850b13	 orr         r0, r5, #0x13, 22
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a04000	 mov         r4, r0

; 476  : 	OMAP_WDOG_REGS *pWdogTimer = OALPAtoUA(OMAP_WDOG2_REGS_PA);

  00018	e38509c5	 orr         r0, r5, #0xC5, 18
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA

; 477  : 
; 478  : 	SETREG32(&pPrcmWkupCM->CM_FCLKEN_WKUP, CM_CLKEN_WDT2);

  00024	e5943000	 ldr         r3, [r4]

; 479  : 	SETREG32(&pPrcmWkupCM->CM_ICLKEN_WKUP, CM_CLKEN_WDT2);
; 480  : 
; 481  : 	WaitOnValue(CM_IDLEST_ST_WDT2, CM_IDLEST_ST_WDT2, &pPrcmWkupCM->CM_IDLEST_WKUP, 5); // Some issue here

  00028	e2841020	 add         r1, r4, #0x20
  0002c	e3a02001	 mov         r2, #1
  00030	e3833020	 orr         r3, r3, #0x20
  00034	e5843000	 str         r3, [r4]
  00038	e5b43010	 ldr         r3, [r4, #0x10]!
  0003c	e3833020	 orr         r3, r3, #0x20
  00040	e5843000	 str         r3, [r4]
  00044	ea000002	 b           |$LN18@WatchdogSe|
  00048		 |$LL8@WatchdogSe|
  00048	e3520005	 cmp         r2, #5
  0004c	0a000004	 beq         |$LN16@WatchdogSe|
  00050	e2822001	 add         r2, r2, #1
  00054		 |$LN18@WatchdogSe|
  00054	e5913000	 ldr         r3, [r1]
  00058	e2033020	 and         r3, r3, #0x20
  0005c	e3530020	 cmp         r3, #0x20
  00060	1afffff8	 bne         |$LL8@WatchdogSe|
  00064		 |$LN16@WatchdogSe|
  00064	e3a03caa	 mov         r3, #0xAA, 24

; 482  : 
; 483  : 	OUTREG32(&pWdogTimer->WSPR, WDOG_DISABLE_SEQ1);

  00068	e38330aa	 orr         r3, r3, #0xAA
  0006c	e5803048	 str         r3, [r0, #0x48]
  00070		 |$LL2@WatchdogSe|

; 484  : 	while (INREG32(&pWdogTimer->WWPS));

  00070	e5903034	 ldr         r3, [r0, #0x34]
  00074	e3530000	 cmp         r3, #0
  00078	1afffffc	 bne         |$LL2@WatchdogSe|
  0007c	e3a03c55	 mov         r3, #0x55, 24

; 485  : 	OUTREG32(&pWdogTimer->WSPR, WDOG_DISABLE_SEQ2);

  00080	e3833055	 orr         r3, r3, #0x55
  00084	e5803048	 str         r3, [r0, #0x48]

; 486  : }

  00088	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$M46994|

			 ENDP  ; |WatchdogSetup|

; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T47012| DCD	|$LN11@PinMuxSetu|
	DCD	0x40001601
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bootloader\xldr\platform.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PinMuxSetup| PROC

; 495  : {

  00000		 |$LN11@PinMuxSetu|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47009|

; 496  :     static const PAD_INFO initialPinMux[] = {
; 497  :             SDRC_PADS            
; 498  :             GPMC_PADS
; 499  :             UART3_PADS
; 500  :             MMC1_PADS
; 501  :             I2C1_PADS
; 502  :             I2C2_PADS
; 503  :             I2C3_PADS
; 504  :             WKUP_PAD_ENTRY(SYS_32K, INPUT_ENABLED | PULL_RESISTOR_DISABLED | MUXMODE(0))
; 505  :             GPIO_PADS_37XX       
; 506  :             END_OF_PAD_ARRAY
; 507  :     };
; 508  : 
; 509  :     ConfigurePadArray(initialPinMux);

  00004	e3a01c7f	 mov         r1, #0x7F, 24
  00008	e3a00cff	 mov         r0, #0xFF, 24
  0000c	e59f5040	 ldr         r5, [pc, #0x40]
  00010	e38160ff	 orr         r6, r1, #0xFF
  00014	e38070ff	 orr         r7, r0, #0xFF
  00018	e3a04000	 mov         r4, #0
  0001c	e3a03000	 mov         r3, #0
  00020	e3a02000	 mov         r2, #0
  00024		 |$LL4@PinMuxSetu|
  00024	e0833005	 add         r3, r3, r5
  00028	e5933004	 ldr         r3, [r3, #4]
  0002c	e1a00002	 mov         r0, r2
  00030	e0031006	 and         r1, r3, r6
  00034	eb000000	 bl          SOCSetPadConfig
  00038	e2844001	 add         r4, r4, #1
  0003c	e1a03184	 mov         r3, r4, lsl #3
  00040	e19320b5	 ldrh        r2, [r3, +r5]
  00044	e1520007	 cmp         r2, r7
  00048	1afffff5	 bne         |$LL4@PinMuxSetu|

; 510  : }

  0004c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN12@PinMuxSetu|
  00054		 |$LN13@PinMuxSetu|
  00054	00000000	 DCD         |?initialPinMux@?1??PinMuxSetup@@9@9|
  00058		 |$M47010|

			 ENDP  ; |PinMuxSetup|


  00000			 AREA	 |.pdata|, PDATA
|$T47021| DCD	|$LN5@GpioSetup|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GpioSetup| PROC

; 519  : {

  00000		 |$LN5@GpioSetup|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47018|
  00004	e3a03312	 mov         r3, #0x12, 6

; 520  :     OMAP_GPIO_REGS* pGpio;
; 521  :        
; 522  :     // Initialize state/direction for all pins configured as gpio
; 523  :     // Bank 1 GPIO 0..31
; 524  :     pGpio = OALPAtoUA(OMAP_GPIO1_REGS_PA);

  00008	e3830831	 orr         r0, r3, #0x31, 16
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 525  : 
; 526  :     // Set GPIO7 as output
; 527  :     OUTREG32(&pGpio->OE, ~(1 << 7));

  00014	e3e03080	 mvn         r3, #0x80
  00018	e5803034	 str         r3, [r0, #0x34]

; 528  :     // Bank 2 GPIO 32..63
; 529  :     //pGpio = OALPAtoUA(OMAP_GPIO2_REGS_PA);
; 530  :     //OUTREG32(&pGpio->OE, ~(1 << 29)); // BL_EN -output
; 531  :     //SETREG32(&pGpio->DATAOUT, 1 << 29);
; 532  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M47019|

			 ENDP  ; |GpioSetup|


  00000			 AREA	 |.pdata|, PDATA
|$T47033| DCD	|$LN7@ClockSetup|
	DCD	0x40003601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ClockSetup| PROC

; 542  : {    

  00000		 |$LN7@ClockSetup|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47030|
  00004	e1a05000	 mov         r5, r0

; 543  :     
; 544  :     OMAP_PRCM_CLOCK_CONTROL_PRM_REGS* pPrcmClkPRM = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_PRM_REGS_PA);

  00008	e59f00c4	 ldr         r0, [pc, #0xC4]
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e3a08312	 mov         r8, #0x12, 6
  00018	e1a04000	 mov         r4, r0

; 545  :     OMAP_PRCM_WKUP_CM_REGS* pPrcmWkupCM = OALPAtoUA(OMAP_PRCM_WKUP_CM_REGS_PA);

  0001c	e3880b13	 orr         r0, r8, #0x13, 22
  00020	e3a01000	 mov         r1, #0
  00024	eb000000	 bl          OALPAtoVA
  00028	e1a06000	 mov         r6, r0

; 546  :     OMAP_PRCM_PER_CM_REGS* pPrcmPerCM = OALPAtoUA(OMAP_PRCM_PER_CM_REGS_PA);

  0002c	e3880a05	 orr         r0, r8, #5, 20
  00030	e3a01000	 mov         r1, #0
  00034	eb000000	 bl          OALPAtoVA
  00038	e1a07000	 mov         r7, r0

; 547  :     OMAP_PRCM_CORE_CM_REGS* pPrcmCoreCM = OALPAtoUA(OMAP_PRCM_CORE_CM_REGS_PA);

  0003c	e3880c4a	 orr         r0, r8, #0x4A, 24
  00040	e3a01000	 mov         r1, #0
  00044	eb000000	 bl          OALPAtoVA

; 548  :     
; 549  :     // setup input system clock
; 550  :     OUTREG32(&pPrcmClkPRM->PRM_CLKSEL, BSP_PRM_CLKSEL);
; 551  : 
; 552  :     if(gCPU_family == CPU_FAMILY_DM37XX)

  00048	e59f3080	 ldr         r3, [pc, #0x80]
  0004c	e3a02003	 mov         r2, #3
  00050	e5842040	 str         r2, [r4, #0x40]
  00054	e5933000	 ldr         r3, [r3]
  00058	e1a04000	 mov         r4, r0
  0005c	e3530001	 cmp         r3, #1
  00060	1a000006	 bne         |$LN2@ClockSetup|

; 553  :     {
; 554  :         Omap37xx_core_dpll_init();

  00064	eb000000	 bl          Omap37xx_core_dpll_init

; 555  :         Omap37xx_dpll4_init();        

  00068	eb000000	 bl          Omap37xx_dpll4_init

; 556  :         Mpu_dpll_init(opp_setting);

  0006c	e1a00005	 mov         r0, r5
  00070	eb000000	 bl          Mpu_dpll_init

; 557  :         Iva_dpll_init(opp_setting);   

  00074	e1a00005	 mov         r0, r5
  00078	eb000000	 bl          Iva_dpll_init

; 558  :         Omap37xx_per_dpll_init();

  0007c	eb000000	 bl          Omap37xx_per_dpll_init
  00080		 |$LN2@ClockSetup|

; 559  :     }
; 560  :     else
; 561  :     {
; 562  :         /*Core_dpll_init();
; 563  :         Dpll4_init();
; 564  :         Mpu_dpll_init(opp_setting);
; 565  :         Iva_dpll_init(opp_setting);    
; 566  :         Per_dpll_init();*/
; 567  :     }
; 568  :     
; 569  :     //--------------------------
; 570  :     // Enable GPTIMER1, GPIO bank 1 (debug led)
; 571  :     SETREG32(&pPrcmWkupCM->CM_FCLKEN_WKUP, (CM_CLKEN_GPT1|CM_CLKEN_GPIO1));

  00080	e5963000	 ldr         r3, [r6]

; 572  :     SETREG32(&pPrcmWkupCM->CM_ICLKEN_WKUP, (CM_CLKEN_GPT1|CM_CLKEN_GPIO1));
; 573  : 
; 574  :     // Enable UART3 (debug port) and GPIO banks that are accessed in the bootloader
; 575  :     SETREG32(&pPrcmPerCM->CM_FCLKEN_PER, (CM_CLKEN_UART3|CM_CLKEN_GPIO6|CM_CLKEN_GPIO5|CM_CLKEN_GPIO3));
; 576  :     SETREG32(&pPrcmPerCM->CM_ICLKEN_PER, (CM_CLKEN_UART3|CM_CLKEN_GPIO6|CM_CLKEN_GPIO5|CM_CLKEN_GPIO3));

  00084	e3833009	 orr         r3, r3, #9
  00088	e5863000	 str         r3, [r6]
  0008c	e5b63010	 ldr         r3, [r6, #0x10]!

; 577  : 
; 578  :     // Disable HS USB OTG interface clock
; 579  :     CLRREG32(&pPrcmCoreCM->CM_ICLKEN1_CORE, CM_CLKEN_HSOTGUSB);
; 580  : 
; 581  :     // Disable D2D interface clock
; 582  :     CLRREG32(&pPrcmCoreCM->CM_ICLKEN1_CORE, CM_CLKEN_D2D);

  00090	e3833009	 orr         r3, r3, #9
  00094	e5863000	 str         r3, [r6]
  00098	e5973000	 ldr         r3, [r7]
  0009c	e3833bd2	 orr         r3, r3, #0xD2, 22
  000a0	e5873000	 str         r3, [r7]
  000a4	e5b73010	 ldr         r3, [r7, #0x10]!
  000a8	e3833bd2	 orr         r3, r3, #0xD2, 22
  000ac	e5873000	 str         r3, [r7]
  000b0	e5943010	 ldr         r3, [r4, #0x10]
  000b4	e3c33010	 bic         r3, r3, #0x10
  000b8	e5843010	 str         r3, [r4, #0x10]
  000bc	e5943010	 ldr         r3, [r4, #0x10]
  000c0	e3c33008	 bic         r3, r3, #8
  000c4	e5843010	 str         r3, [r4, #0x10]

; 583  : 
; 584  : }

  000c8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN8@ClockSetup|
  000d0		 |$LN9@ClockSetup|
  000d0	00000000	 DCD         |gCPU_family|
  000d4		 |$LN10@ClockSetup|
  000d4	48306d00	 DCD         0x48306d00
  000d8		 |$M47031|

			 ENDP  ; |ClockSetup|

	IMPORT	|OALStall|

  00000			 AREA	 |.pdata|, PDATA
|$T47052| DCD	|$LN13@MemorySetu|
	DCD	0x4000b501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MemorySetup| PROC

; 593  : {

  00000		 |$LN13@MemorySetu|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M47049|

; 594  :     OMAP_GPMC_REGS* pGpmc = OALPAtoUA(OMAP_GPMC_REGS_PA);

  00004	e3a01000	 mov         r1, #0
  00008	e3a0046e	 mov         r0, #0x6E, 8
  0000c	eb000000	 bl          OALPAtoVA
  00010	e1a04000	 mov         r4, r0

; 595  :     OMAP_SDRC_REGS* pSdrc = OALPAtoUA(OMAP_SDRC_REGS_PA);

  00014	e3a0046d	 mov         r0, #0x6D, 8
  00018	e3a01000	 mov         r1, #0
  0001c	eb000000	 bl          OALPAtoVA
  00020	e1a05000	 mov         r5, r0

; 596  :     OMAP_PRCM_GLOBAL_PRM_REGS * pPrmGlobal = OALPAtoUA(OMAP_PRCM_GLOBAL_PRM_REGS_PA);

  00024	e59f02a4	 ldr         r0, [pc, #0x2A4]
  00028	e3a01000	 mov         r1, #0
  0002c	eb000000	 bl          OALPAtoVA
  00030	e1a06000	 mov         r6, r0

; 597  :     OMAP_SYSC_PADCONFS_REGS *pConfig = OALPAtoUA(OMAP_SYSC_PADCONFS_REGS_PA);

  00034	e59f0290	 ldr         r0, [pc, #0x290]
  00038	e3a01000	 mov         r1, #0
  0003c	eb000000	 bl          OALPAtoVA

; 598  :     DDR_DEVICE_TYPE ddr_type = DDR_TYPE_MICRON;	
; 599  :     DDR_DEVICE_PARAM  *pDDR_param;
; 600  :     unsigned int val = 0;
; 601  :     BOOL bColdBoot;
; 602  : 
; 603  : #ifdef FIX_DDR_STALL_ERRATA
; 604  : 	OMAP_PRCM_CORE_CM_REGS* pPrcmCoreCM = OALPAtoUA(OMAP_PRCM_CORE_CM_REGS_PA);
; 605  :     OMAP_SMS_REGS* pSms = OALPAtoUA(OMAP_SMS_REGS_PA);
; 606  : #endif
; 607  : 
; 608  :     //  Global GPMC Configuration
; 609  :     OUTREG32(&pGpmc->GPMC_SYSCONFIG,       0x00000008);   // No idle, L3 clock free running      

  00040	e3a03008	 mov         r3, #8
  00044	e5843010	 str         r3, [r4, #0x10]

; 610  :     OUTREG32(&pGpmc->GPMC_IRQENABLE,       0x00000000);   // All interrupts disabled    
; 611  :     OUTREG32(&pGpmc->GPMC_TIMEOUT_CONTROL, 0x00000000);   // Time out disabled    
; 612  :     OUTREG32(&pGpmc->GPMC_CONFIG,          0x00000011);   // WP high, force posted write for NAND    
; 613  : 
; 614  : #ifdef FMD_ONENAND
; 615  :     // Configure CS0 for OneNAND,  Base Address 0x0C000000
; 616  :     OUTREG32(&pGpmc->GPMC_CONFIG1_0, BSP_GPMC_ONENAND_CONFIG1);
; 617  :     OUTREG32(&pGpmc->GPMC_CONFIG2_0, BSP_GPMC_ONENAND_CONFIG2);
; 618  :     OUTREG32(&pGpmc->GPMC_CONFIG3_0, BSP_GPMC_ONENAND_CONFIG3);
; 619  :     OUTREG32(&pGpmc->GPMC_CONFIG4_0, BSP_GPMC_ONENAND_CONFIG4);
; 620  :     OUTREG32(&pGpmc->GPMC_CONFIG5_0, BSP_GPMC_ONENAND_CONFIG5);
; 621  :     OUTREG32(&pGpmc->GPMC_CONFIG6_0, BSP_GPMC_ONENAND_CONFIG6);
; 622  :     OUTREG32(&pGpmc->GPMC_CONFIG7_0, BSP_GPMC_ONENAND_CONFIG7);
; 623  : #endif
; 624  :     if(gCPU_family == CPU_FAMILY_DM37XX)

  00048	e59f3278	 ldr         r3, [pc, #0x278]
  0004c	e3a09000	 mov         r9, #0
  00050	e584901c	 str         r9, [r4, #0x1C]
  00054	e3a02011	 mov         r2, #0x11
  00058	e5849040	 str         r9, [r4, #0x40]
  0005c	e5842050	 str         r2, [r4, #0x50]
  00060	e5933000	 ldr         r3, [r3]
  00064	e1a07000	 mov         r7, r0
  00068	e3a0e000	 mov         lr, #0
  0006c	e3530001	 cmp         r3, #1
  00070	1a00001f	 bne         |$LN7@MemorySetu|

; 625  :     {
; 626  : #ifdef FMD_NAND
; 627  :         // Configure CS0 for NAND,  Base Address 0x08000000
; 628  :         OUTREG32(&pGpmc->GPMC_CONFIG1_0, BSP_GPMC_NAND_CONFIG1_200);

  00074	e3a03b06	 mov         r3, #6, 22

; 629  :         OUTREG32(&pGpmc->GPMC_CONFIG2_0, BSP_GPMC_NAND_CONFIG2_200);
; 630  :         OUTREG32(&pGpmc->GPMC_CONFIG3_0, BSP_GPMC_NAND_CONFIG3_200);
; 631  :         OUTREG32(&pGpmc->GPMC_CONFIG4_0, BSP_GPMC_NAND_CONFIG4_200);

  00078	e5843060	 str         r3, [r4, #0x60]

; 632  :         OUTREG32(&pGpmc->GPMC_CONFIG5_0, BSP_GPMC_NAND_CONFIG5_200);

  0007c	e3a03705	 mov         r3, #5, 14
  00080	e59f123c	 ldr         r1, [pc, #0x23C]
  00084	e59fe234	 ldr         lr, [pc, #0x234]
  00088	e3833b05	 orr         r3, r3, #5, 22

; 633  :         OUTREG32(&pGpmc->GPMC_CONFIG6_0, BSP_GPMC_NAND_CONFIG6_200);

  0008c	e59f2228	 ldr         r2, [pc, #0x228]
  00090	e5843064	 str         r3, [r4, #0x64]
  00094	e5843068	 str         r3, [r4, #0x68]
  00098	e3a08c0f	 mov         r8, #0xF, 24
  0009c	e584106c	 str         r1, [r4, #0x6C]
  000a0	e584e070	 str         lr, [r4, #0x70]

; 634  :         OUTREG32(&pGpmc->GPMC_CONFIG7_0, BSP_GPMC_NAND_CONFIG7);

  000a4	e3883048	 orr         r3, r8, #0x48
  000a8	e5842074	 str         r2, [r4, #0x74]

; 635  : #endif
; 636  :     
; 637  :         // Configure CS5 for LAN,  Base Address 0x15000000
; 638  :         OUTREG32(&pGpmc->GPMC_CONFIG1_5, BSP_GPMC_LAN_CONFIG1_200);
; 639  :         OUTREG32(&pGpmc->GPMC_CONFIG2_5, BSP_GPMC_LAN_CONFIG2_200);
; 640  :         OUTREG32(&pGpmc->GPMC_CONFIG3_5, BSP_GPMC_LAN_CONFIG3_200);

  000ac	e5843078	 str         r3, [r4, #0x78]
  000b0	e3a03a01	 mov         r3, #1, 20
  000b4	e3a0280a	 mov         r2, #0xA, 16
  000b8	e59f11e8	 ldr         r1, [pc, #0x1E8]
  000bc	e5843150	 str         r3, [r4, #0x150]
  000c0	e3823c0a	 orr         r3, r2, #0xA, 24
  000c4	e3a0040a	 mov         r0, #0xA, 8

; 641  :         OUTREG32(&pGpmc->GPMC_CONFIG4_5, BSP_GPMC_LAN_CONFIG4_200); 
; 642  :         OUTREG32(&pGpmc->GPMC_CONFIG5_5, BSP_GPMC_LAN_CONFIG5_200); 

  000c8	e59f21e8	 ldr         r2, [pc, #0x1E8]
  000cc	e5843154	 str         r3, [r4, #0x154]
  000d0	e3803c0a	 orr         r3, r0, #0xA, 24
  000d4	e5841158	 str         r1, [r4, #0x158]
  000d8	e584315c	 str         r3, [r4, #0x15C]

; 643  :         OUTREG32(&pGpmc->GPMC_CONFIG6_5, BSP_GPMC_LAN_CONFIG6_200); 

  000dc	e3a03d3e	 mov         r3, #0x3E, 26
  000e0	e5842160	 str         r2, [r4, #0x160]
  000e4	e5843164	 str         r3, [r4, #0x164]

; 644  :         OUTREG32(&pGpmc->GPMC_CONFIG7_5, BSP_GPMC_LAN_CONFIG7); 

  000e8	e3883055	 orr         r3, r8, #0x55

; 645  : 
; 646  :         ddr_type = DDR_TYPE_HYNIX;

  000ec	e3a0e001	 mov         lr, #1
  000f0	ea000022	 b           |$LN10@MemorySetu|
  000f4		 |$LN7@MemorySetu|

; 647  :     }
; 648  :     else if (gCPU_family == CPU_FAMILY_OMAP35XX)

  000f4	e3530000	 cmp         r3, #0
  000f8	1a000021	 bne         |$LN5@MemorySetu|
  000fc	e3a03806	 mov         r3, #6, 16

; 649  :     {
; 650  : #ifdef FMD_NAND
; 651  :         // Configure CS0 for NAND,  Base Address 0x08000000
; 652  :         OUTREG32(&pGpmc->GPMC_CONFIG1_0, BSP_GPMC_NAND_CONFIG1_166);
; 653  :         OUTREG32(&pGpmc->GPMC_CONFIG2_0, BSP_GPMC_NAND_CONFIG2_166);
; 654  :         OUTREG32(&pGpmc->GPMC_CONFIG3_0, BSP_GPMC_NAND_CONFIG3_166);

  00100	e59f11ac	 ldr         r1, [pc, #0x1AC]
  00104	e3a0eb06	 mov         lr, #6, 22

; 655  :         OUTREG32(&pGpmc->GPMC_CONFIG4_0, BSP_GPMC_NAND_CONFIG4_166);

  00108	e59f21a0	 ldr         r2, [pc, #0x1A0]
  0010c	e3833c06	 orr         r3, r3, #6, 24

; 656  :         OUTREG32(&pGpmc->GPMC_CONFIG5_0, BSP_GPMC_NAND_CONFIG5_166);

  00110	e59f0194	 ldr         r0, [pc, #0x194]
  00114	e584e060	 str         lr, [r4, #0x60]
  00118	e5843064	 str         r3, [r4, #0x64]
  0011c	e3a03405	 mov         r3, #5, 8
  00120	e5841068	 str         r1, [r4, #0x68]

; 657  :         OUTREG32(&pGpmc->GPMC_CONFIG6_0, BSP_GPMC_NAND_CONFIG6_166);

  00124	e3833d07	 orr         r3, r3, #7, 26
  00128	e584206c	 str         r2, [r4, #0x6C]
  0012c	e3a0ec0f	 mov         lr, #0xF, 24
  00130	e5840070	 str         r0, [r4, #0x70]
  00134	e5843074	 str         r3, [r4, #0x74]

; 658  :         OUTREG32(&pGpmc->GPMC_CONFIG7_0, BSP_GPMC_NAND_CONFIG7);

  00138	e38e3048	 orr         r3, lr, #0x48

; 659  : #endif
; 660  :     
; 661  :         // Configure CS5 for LAN,  Base Address 0x15000000
; 662  :         OUTREG32(&pGpmc->GPMC_CONFIG1_5, BSP_GPMC_LAN_CONFIG1_166);
; 663  :         OUTREG32(&pGpmc->GPMC_CONFIG2_5, BSP_GPMC_LAN_CONFIG2_166);
; 664  :         OUTREG32(&pGpmc->GPMC_CONFIG3_5, BSP_GPMC_LAN_CONFIG3_166);

  0013c	e5843078	 str         r3, [r4, #0x78]
  00140	e3a03a01	 mov         r3, #1, 20
  00144	e3a02702	 mov         r2, #2, 14
  00148	e59f1158	 ldr         r1, [pc, #0x158]
  0014c	e5843150	 str         r3, [r4, #0x150]
  00150	e3823b02	 orr         r3, r2, #2, 22
  00154	e3a00302	 mov         r0, #2, 6

; 665  :         OUTREG32(&pGpmc->GPMC_CONFIG4_5, BSP_GPMC_LAN_CONFIG4_166); 
; 666  :         OUTREG32(&pGpmc->GPMC_CONFIG5_5, BSP_GPMC_LAN_CONFIG5_166); 

  00158	e59f2144	 ldr         r2, [pc, #0x144]
  0015c	e5843154	 str         r3, [r4, #0x154]
  00160	e3803b02	 orr         r3, r0, #2, 22
  00164	e5841158	 str         r1, [r4, #0x158]
  00168	e584315c	 str         r3, [r4, #0x15C]

; 667  :         OUTREG32(&pGpmc->GPMC_CONFIG6_5, BSP_GPMC_LAN_CONFIG6_166); 

  0016c	e3a03d3e	 mov         r3, #0x3E, 26
  00170	e5842160	 str         r2, [r4, #0x160]
  00174	e5843164	 str         r3, [r4, #0x164]

; 668  :         OUTREG32(&pGpmc->GPMC_CONFIG7_5, BSP_GPMC_LAN_CONFIG7); 

  00178	e38e3055	 orr         r3, lr, #0x55

; 669  : 
; 670  :         ddr_type = DDR_TYPE_MICRON;		

  0017c	e3a0e000	 mov         lr, #0
  00180		 |$LN10@MemorySetu|

; 668  :         OUTREG32(&pGpmc->GPMC_CONFIG7_5, BSP_GPMC_LAN_CONFIG7); 

  00180	e5843168	 str         r3, [r4, #0x168]

; 669  : 
; 670  :         ddr_type = DDR_TYPE_MICRON;		

  00184		 |$LN5@MemorySetu|

; 671  : 
; 672  :     }
; 673  :     else
; 674  :     {
; 675  :         /* Not supported CPU family , use default ddr_type */
; 676  :     }
; 677  :     // check global reset status
; 678  :     val = INREG32(&pPrmGlobal->PRM_RSTST);

  00184	e5963058	 ldr         r3, [r6, #0x58]

; 679  : 
; 680  :     if (val & (GLOBAL_SW_RST | EXTERNAL_WARM_RST))
; 681  :         bColdBoot = FALSE;
; 682  :     else
; 683  :         bColdBoot = TRUE;
; 684  :     
; 685  : #ifdef FIX_DDR_STALL_ERRATA
; 686  : 	// Re-enable SDRC interface clock in case we come back from warm reset
; 687  : 	SETREG32(&pPrcmCoreCM->CM_ICLKEN1_CORE, CM_CLKEN_SDRC);
; 688  : 	{
; 689  : 		volatile int timeout = 1000;
; 690  : 		while(((INREG32(&pPrcmCoreCM->CM_IDLEST1_CORE) & CM_CLKEN_SDRC) != 0) || (timeout-- > 0))
; 691  : 		{
; 692  : 			OALStall(1);
; 693  : 		}
; 694  : 	}
; 695  : #endif
; 696  : 
; 697  :     // read config register
; 698  :     INREG32(&pSdrc->SDRC_SYSCONFIG);
; 699  :     pDDR_param = &BSP_DDR_device_params[ddr_type];		

  00188	e59f2110	 ldr         r2, [pc, #0x110]

; 700  : 
; 701  :     if (bColdBoot == FALSE)

  0018c	e3a08002	 mov         r8, #2
  00190	e3130042	 tst         r3, #0x42
  00194	13a01000	 movne       r1, #0
  00198	03a01001	 moveq       r1, #1
  0019c	e3510000	 cmp         r1, #0
  001a0	e5953010	 ldr         r3, [r5, #0x10]

; 702  :     {
; 703  : #ifdef FIX_DDR_STALL_ERRATA
; 704  : 		// As per advisory 3.1.1.178 in errata sheet
; 705  : 		// Reset SMS controller first
; 706  : 		SETREG32(&pSms->SMS_SYSCONFIG, SMS_SYSCONFIG_SOFTRESET);
; 707  : 		{
; 708  : 			volatile int timeout = 1000;
; 709  : 			while(((INREG32(&pSms->SMS_SYSSTATUS) & SMS_SYSSTATUS_RESETDONE) == 0) || (timeout-- > 0))
; 710  : 			{
; 711  : 				OALStall(1);
; 712  : 			}
; 713  : 		}
; 714  : 
; 715  : 		//Reset SDRC controller
; 716  :         OUTREG32(&pSdrc->SDRC_SYSCONFIG, SDRC_SYSCONFIG_SOFTRESET);
; 717  : 		{
; 718  : 			volatile int timeout = 1000;
; 719  : 			while(((INREG32(&pSdrc->SDRC_SYSSTATUS) & SDRC_SYSSTATUS_RESETDONE) == 0) || (timeout-- > 0))
; 720  : 			{
; 721  : 				OALStall(1);
; 722  : 			}
; 723  : 		}
; 724  : #else
; 725  : 		//After warm reset, the SDRC will be unreliable and this will cause eboot image can't be copied from NAND flash to SDRAM correctly.
; 726  :         //Therefore, we have to force SDRC to reset after warm reset to solve this issue.
; 727  :         
; 728  :         //SDRC reset by software
; 729  :         OUTREG32(&pSdrc->SDRC_SYSCONFIG, SDRC_SYSCONFIG_SOFTRESET);
; 730  :         // wait for at least 1000us
; 731  :         OALStall(1000);

  001a4	03a00ffa	 moveq       r0, #0xFA, 30
  001a8	e082428e	 add         r4, r2, lr, lsl #5
  001ac	05858010	 streq       r8, [r5, #0x10]
  001b0	0b000000	 bleq        OALStall

; 732  : 
; 733  :         //After SDRC reset, we do below steps to configure SDRC regisger again.
; 734  : #endif
; 735  :     }
; 736  : 	
; 737  :     //if (bColdBoot == TRUE)
; 738  :     {
; 739  :         // Disable SDRC power saving mode
; 740  :         CLRREG32(&pSdrc->SDRC_POWER, SDRC_POWER_PWDENA);

  001b4	e5953070	 ldr         r3, [r5, #0x70]

; 741  : 
; 742  :         // update memory cofiguration
; 743  :         OUTREG32(&pSdrc->SDRC_MCFG_0, pDDR_param->mcfg0);
; 744  :         OUTREG32(&pSdrc->SDRC_MCFG_1, pDDR_param->mcfg1);
; 745  :         OUTREG32(&pSdrc->SDRC_SHARING, BSP_SDRC_SHARING);

  001b8	e3a02c01	 mov         r2, #1, 24

; 746  : 
; 747  :         // wait for at least 200us
; 748  :         OALStall(2000);

  001bc	e3a00e7d	 mov         r0, #0x7D, 28
  001c0	e3c33004	 bic         r3, r3, #4
  001c4	e5853070	 str         r3, [r5, #0x70]
  001c8	e5943000	 ldr         r3, [r4]
  001cc	e5853080	 str         r3, [r5, #0x80]
  001d0	e5943004	 ldr         r3, [r4, #4]
  001d4	e58530b0	 str         r3, [r5, #0xB0]
  001d8	e5852044	 str         r2, [r5, #0x44]
  001dc	eb000000	 bl          OALStall

; 749  : 
; 750  :         // set autorefresh
; 751  :         OUTREG32(&pSdrc->SDRC_RFR_CTRL_0, pDDR_param->rfr_ctrl0);

  001e0	e5943018	 ldr         r3, [r4, #0x18]

; 752  :         OUTREG32(&pSdrc->SDRC_RFR_CTRL_1, pDDR_param->rfr_ctrl1);
; 753  : 
; 754  :         // setup ac timings
; 755  :         OUTREG32(&pSdrc->SDRC_ACTIM_CTRLA_0, pDDR_param->actim_ctrla0);
; 756  :         OUTREG32(&pSdrc->SDRC_ACTIM_CTRLA_1, pDDR_param->actim_ctrla1);
; 757  :         OUTREG32(&pSdrc->SDRC_ACTIM_CTRLB_0, pDDR_param->actim_ctrlb0);
; 758  :         OUTREG32(&pSdrc->SDRC_ACTIM_CTRLB_1, pDDR_param->actim_ctrlb1);    
; 759  : 
; 760  :         // manual command sequence to start bank 0
; 761  :         OUTREG32(&pSdrc->SDRC_MANUAL_0, 0);
; 762  :         // wait for at least 200us
; 763  :         OALStall(2000);

  001e4	e3a00e7d	 mov         r0, #0x7D, 28
  001e8	e58530a4	 str         r3, [r5, #0xA4]
  001ec	e594301c	 ldr         r3, [r4, #0x1C]
  001f0	e58530d4	 str         r3, [r5, #0xD4]
  001f4	e5943008	 ldr         r3, [r4, #8]
  001f8	e585309c	 str         r3, [r5, #0x9C]
  001fc	e5943010	 ldr         r3, [r4, #0x10]
  00200	e58530c4	 str         r3, [r5, #0xC4]
  00204	e594300c	 ldr         r3, [r4, #0xC]
  00208	e58530a0	 str         r3, [r5, #0xA0]
  0020c	e5943014	 ldr         r3, [r4, #0x14]
  00210	e58530c8	 str         r3, [r5, #0xC8]
  00214	e58590a8	 str         r9, [r5, #0xA8]
  00218	eb000000	 bl          OALStall

; 764  :         OUTREG32(&pSdrc->SDRC_MANUAL_0, 1);

  0021c	e3a06001	 mov         r6, #1
  00220	e58560a8	 str         r6, [r5, #0xA8]

; 765  :         OUTREG32(&pSdrc->SDRC_MANUAL_0, 2);

  00224	e58580a8	 str         r8, [r5, #0xA8]

; 766  :         OUTREG32(&pSdrc->SDRC_MANUAL_0, 2);
; 767  :         OUTREG32(&pSdrc->SDRC_MR_0, BSP_SDRC_MR_0);

  00228	e3a04032	 mov         r4, #0x32
  0022c	e58580a8	 str         r8, [r5, #0xA8]
  00230	e5854084	 str         r4, [r5, #0x84]

; 768  :         
; 769  :         #if BSP_MICRON_RAMSIZE_1
; 770  :             // manual command sequence to start bank 1
; 771  :             OUTREG32(&pSdrc->SDRC_MANUAL_1, 0);
; 772  :             // wait for at least 200us
; 773  :             OALStall(2000);

  00234	e3a00e7d	 mov         r0, #0x7D, 28
  00238	e58590d8	 str         r9, [r5, #0xD8]
  0023c	eb000000	 bl          OALStall

; 774  :             OUTREG32(&pSdrc->SDRC_MANUAL_1, 1);

  00240	e58560d8	 str         r6, [r5, #0xD8]

; 775  :             OUTREG32(&pSdrc->SDRC_MANUAL_1, 2);

  00244	e58580d8	 str         r8, [r5, #0xD8]

; 776  :             OUTREG32(&pSdrc->SDRC_MANUAL_1, 2);

  00248	e58580d8	 str         r8, [r5, #0xD8]

; 777  :             OUTREG32(&pSdrc->SDRC_MR_1, BSP_SDRC_MR_1);

  0024c	e58540b4	 str         r4, [r5, #0xB4]

; 778  :         #endif
; 779  : 
; 780  :         // re-enable power saving mode
; 781  :         SETREG32(&pSdrc->SDRC_POWER, SDRC_POWER_PWDENA | SDRC_POWER_SRFRONIDLEREQ);

  00250	e5953070	 ldr         r3, [r5, #0x70]

; 782  : 
; 783  :         // update sdrc dll timings
; 784  :         OUTREG32(&pSdrc->SDRC_DLLA_CTRL, BSP_SDRC_DLLA_CTRL);

  00254	e3a02426	 mov         r2, #0x26, 8
  00258	e382200a	 orr         r2, r2, #0xA
  0025c	e3833044	 orr         r3, r3, #0x44
  00260	e5853070	 str         r3, [r5, #0x70]
  00264	e5852060	 str         r2, [r5, #0x60]

; 785  :         OUTREG32(&pSdrc->SDRC_DLLB_CTRL, BSP_SDRC_DLLB_CTRL);

  00268	e5852068	 str         r2, [r5, #0x68]

; 786  :         
; 787  :         // update sdram characteristics
; 788  :         OUTREG32(&pSdrc->SDRC_EMR2_0, BSP_SDRC_EMR2_0);

  0026c	e585908c	 str         r9, [r5, #0x8C]

; 789  :         OUTREG32(&pSdrc->SDRC_EMR2_1, BSP_SDRC_EMR2_1);

  00270	e58590bc	 str         r9, [r5, #0xBC]

; 790  :     }
; 791  :     
; 792  :     SETREG32(&pSdrc->SDRC_POWER, SDRC_POWER_SRFRONRESET);

  00274	e5953070	 ldr         r3, [r5, #0x70]

; 793  : 
; 794  :     // allow SDRC to settle
; 795  :     OALStall(100);

  00278	e3a00064	 mov         r0, #0x64
  0027c	e3833080	 orr         r3, r3, #0x80
  00280	e5853070	 str         r3, [r5, #0x70]
  00284	eb000000	 bl          OALStall

; 796  : 
; 797  :     // release the force on the clke signals
; 798  :     OUTREG16(&pConfig->CONTROL_PADCONF_SDRC_CKE0, (INPUT_DISABLE | PULL_INACTIVE | MUX_MODE_0));

  00288	e2873c02	 add         r3, r7, #2, 24
  0028c	e1c393b2	 strh        r9, [r3, #0x32]

; 799  :     OUTREG16(&pConfig->CONTROL_PADCONF_SDRC_CKE1, (INPUT_DISABLE | PULL_INACTIVE | MUX_MODE_0)); 

  00290	e2873f8d	 add         r3, r7, #0x8D, 30
  00294	e1c390b0	 strh        r9, [r3]

; 800  : }

  00298	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0029c	e12fff1e	 bx          lr
  002a0		 |$LN14@MemorySetu|
  002a0		 |$LN15@MemorySetu|
  002a0	00000000	 DCD         |BSP_DDR_device_params|
  002a4		 |$LN16@MemorySetu|
  002a4	01060d0d	 DCD         0x1060d0d
  002a8		 |$LN17@MemorySetu|
  002a8	00020201	 DCD         0x20201
  002ac		 |$LN18@MemorySetu|
  002ac	00080909	 DCD         0x80909
  002b0		 |$LN19@MemorySetu|
  002b0	05010801	 DCD         0x5010801
  002b4		 |$LN20@MemorySetu|
  002b4	00060401	 DCD         0x60401
  002b8		 |$LN21@MemorySetu|
  002b8	01081414	 DCD         0x1081414
  002bc		 |$LN22@MemorySetu|
  002bc	1f0f0a80	 DCD         0x1f0f0a80
  002c0		 |$LN23@MemorySetu|
  002c0	010c1414	 DCD         0x10c1414
  002c4		 |$LN24@MemorySetu|
  002c4	0f010f01	 DCD         0xf010f01
  002c8		 |$LN25@MemorySetu|
  002c8	00000000	 DCD         |gCPU_family|
  002cc		 |$LN26@MemorySetu|
  002cc	48002030	 DCD         0x48002030
  002d0		 |$LN27@MemorySetu|
  002d0	48307200	 DCD         0x48307200
  002d4		 |$M47050|

			 ENDP  ; |MemorySetup|


  00000			 AREA	 |.pdata|, PDATA
|$T47075| DCD	|$LN5@UpdateVolt|
	DCD	0x40004a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UpdateVoltageLevels| PROC

; 810  : {   

  00000		 |$LN5@UpdateVolt|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47072|
  00004	e1a04000	 mov         r4, r0

; 811  :     OMAP_PRCM_GLOBAL_PRM_REGS* pPrcmGblPRM = OALPAtoUA(OMAP_PRCM_GLOBAL_PRM_REGS_PA);

  00008	e59f0114	 ldr         r0, [pc, #0x114]
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e3a03812	 mov         r3, #0x12, 16

; 812  : 
; 813  :     //---------------------------------
; 814  :     // setup voltage processors
; 815  :     //
; 816  : 
; 817  :     // setup i2c for smps communication
; 818  :     OUTREG32(&pPrcmGblPRM->PRM_VC_SMPS_SA, BSP_VC_SMPS_SA_INIT);

  00018	e3833012	 orr         r3, r3, #0x12
  0001c	e1a05000	 mov         r5, r0
  00020	e5853020	 str         r3, [r5, #0x20]

; 819  :     OUTREG32(&pPrcmGblPRM->PRM_VC_SMPS_VOL_RA, BSP_VC_SMPS_VOL_RA_INIT);

  00024	e3a03801	 mov         r3, #1, 16
  00028	e5853024	 str         r3, [r5, #0x24]

; 820  :     OUTREG32(&pPrcmGblPRM->PRM_VC_SMPS_CMD_RA, BSP_VC_SMPS_CMD_RA_INIT);

  0002c	e3a03000	 mov         r3, #0
  00030	e5853028	 str         r3, [r5, #0x28]

; 821  :     OUTREG32(&pPrcmGblPRM->PRM_VC_CH_CONF, BSP_VC_CH_CONF_INIT);  

  00034	e3a03817	 mov         r3, #0x17, 16
  00038	e5853034	 str         r3, [r5, #0x34]

; 822  :     OUTREG32(&pPrcmGblPRM->PRM_VC_I2C_CFG, BSP_PRM_VC_I2C_CFG_INIT);

  0003c	e3a03005	 mov         r3, #5
  00040	e5853038	 str         r3, [r5, #0x38]

; 823  : 
; 824  :     // set intial voltage levels
; 825  :     OUTREG32(&pPrcmGblPRM->PRM_VC_CMD_VAL_0, (opp_setting->VDD1Init << 24) | BSP_PRM_VC_CMD_VAL_0_INIT );

  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e3a01602	 mov         r1, #2, 12
  0004c	e3812a02	 orr         r2, r1, #2, 20
  00050	e1823c03	 orr         r3, r2, r3, lsl #24
  00054	e585302c	 str         r3, [r5, #0x2C]

; 826  :     OUTREG32(&pPrcmGblPRM->PRM_VC_CMD_VAL_1, (opp_setting->VDD2Init << 24) | BSP_PRM_VC_CMD_VAL_1_INIT);

  00058	e594300c	 ldr         r3, [r4, #0xC]

; 827  : 
; 828  :     // set PowerIC error offset, gains, and initial voltage
; 829  :     OUTREG32(&pPrcmGblPRM->PRM_VP1_CONFIG, (opp_setting->VDD1Init << 8) | BSP_PRM_VP1_CONFIG_INIT);

  0005c	e3811008	 orr         r1, r1, #8

; 830  :     OUTREG32(&pPrcmGblPRM->PRM_VP2_CONFIG, (opp_setting->VDD2Init << 8) | BSP_PRM_VP2_CONFIG_INIT);
; 831  : 
; 832  :     // set PowerIC slew range
; 833  :     OUTREG32(&pPrcmGblPRM->PRM_VP1_VSTEPMIN, BSP_PRM_VP1_VSTEPMIN_INIT);

  00060	e3a00b7d	 mov         r0, #0x7D, 22
  00064	e1823c03	 orr         r3, r2, r3, lsl #24
  00068	e5853030	 str         r3, [r5, #0x30]
  0006c	e5943008	 ldr         r3, [r4, #8]
  00070	e3802001	 orr         r2, r0, #1
  00074	e1813403	 orr         r3, r1, r3, lsl #8
  00078	e58530b0	 str         r3, [r5, #0xB0]
  0007c	e594300c	 ldr         r3, [r4, #0xC]
  00080	e1813403	 orr         r3, r1, r3, lsl #8
  00084	e58530d0	 str         r3, [r5, #0xD0]

; 834  :     OUTREG32(&pPrcmGblPRM->PRM_VP1_VSTEPMAX, BSP_PRM_VP1_VSTEPMAX_INIT);

  00088	e3803010	 orr         r3, r0, #0x10
  0008c	e58520b4	 str         r2, [r5, #0xB4]
  00090	e58530b8	 str         r3, [r5, #0xB8]

; 835  :     OUTREG32(&pPrcmGblPRM->PRM_VP2_VSTEPMIN, BSP_PRM_VP2_VSTEPMIN_INIT);

  00094	e58520d4	 str         r2, [r5, #0xD4]
  00098	e3e014bf	 mvn         r1, #0xBF, 8

; 836  :     OUTREG32(&pPrcmGblPRM->PRM_VP2_VSTEPMAX, BSP_PRM_VP2_VSTEPMAX_INIT);

  0009c	e58530d8	 str         r3, [r5, #0xD8]

; 837  : 
; 838  :     // set PowerIC voltage limits and timeout
; 839  :     OUTREG32(&pPrcmGblPRM->PRM_VP1_VLIMITTO, BSP_PRM_VP1_VLIMITTO_INIT);

  000a0	e22138ff	 eor         r3, r1, #0xFF, 16
  000a4	e3e024c3	 mvn         r2, #0xC3, 8
  000a8	e58530bc	 str         r3, [r5, #0xBC]

; 840  :     OUTREG32(&pPrcmGblPRM->PRM_VP2_VLIMITTO, BSP_PRM_VP2_VLIMITTO_INIT);

  000ac	e22238ff	 eor         r3, r2, #0xFF, 16
  000b0	e58530dc	 str         r3, [r5, #0xDC]

; 841  :     
; 842  :     // enable voltage processor
; 843  :     SETREG32(&pPrcmGblPRM->PRM_VP1_CONFIG, SMPS_VPENABLE);

  000b4	e59530b0	 ldr         r3, [r5, #0xB0]

; 844  :     SETREG32(&pPrcmGblPRM->PRM_VP2_CONFIG, SMPS_VPENABLE);
; 845  : 
; 846  :     // enable timeout
; 847  :     SETREG32(&pPrcmGblPRM->PRM_VP1_CONFIG, SMPS_TIMEOUTEN);
; 848  :     SETREG32(&pPrcmGblPRM->PRM_VP2_CONFIG, SMPS_TIMEOUTEN);    
; 849  : 
; 850  :     // flush commands to smps
; 851  :     SETREG32(&pPrcmGblPRM->PRM_VP1_CONFIG, SMPS_FORCEUPDATE | SMPS_INITVDD);
; 852  :     SETREG32(&pPrcmGblPRM->PRM_VP2_CONFIG, SMPS_FORCEUPDATE | SMPS_INITVDD);
; 853  : 
; 854  :     // allow voltage to settle
; 855  :     OALStall(100);

  000b8	e3a00064	 mov         r0, #0x64
  000bc	e3833001	 orr         r3, r3, #1
  000c0	e58530b0	 str         r3, [r5, #0xB0]
  000c4	e59530d0	 ldr         r3, [r5, #0xD0]
  000c8	e3833001	 orr         r3, r3, #1
  000cc	e58530d0	 str         r3, [r5, #0xD0]
  000d0	e59530b0	 ldr         r3, [r5, #0xB0]
  000d4	e3833008	 orr         r3, r3, #8
  000d8	e58530b0	 str         r3, [r5, #0xB0]
  000dc	e59530d0	 ldr         r3, [r5, #0xD0]
  000e0	e3833008	 orr         r3, r3, #8
  000e4	e58530d0	 str         r3, [r5, #0xD0]
  000e8	e59530b0	 ldr         r3, [r5, #0xB0]
  000ec	e3833006	 orr         r3, r3, #6
  000f0	e58530b0	 str         r3, [r5, #0xB0]
  000f4	e59530d0	 ldr         r3, [r5, #0xD0]
  000f8	e3833006	 orr         r3, r3, #6
  000fc	e58530d0	 str         r3, [r5, #0xD0]
  00100	eb000000	 bl          OALStall

; 856  : 
; 857  :     // disable voltage processor
; 858  :     CLRREG32(&pPrcmGblPRM->PRM_VP1_CONFIG, SMPS_VPENABLE | SMPS_FORCEUPDATE | SMPS_INITVDD | SMPS_TIMEOUTEN);

  00104	e59530b0	 ldr         r3, [r5, #0xB0]
  00108	e3c3300f	 bic         r3, r3, #0xF
  0010c	e58530b0	 str         r3, [r5, #0xB0]

; 859  :     CLRREG32(&pPrcmGblPRM->PRM_VP2_CONFIG, SMPS_VPENABLE | SMPS_FORCEUPDATE | SMPS_INITVDD | SMPS_TIMEOUTEN);

  00110	e59530d0	 ldr         r3, [r5, #0xD0]
  00114	e3c3300f	 bic         r3, r3, #0xF
  00118	e58530d0	 str         r3, [r5, #0xD0]

; 860  : }

  0011c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00120	e12fff1e	 bx          lr
  00124		 |$LN6@UpdateVolt|
  00124		 |$LN7@UpdateVolt|
  00124	48307200	 DCD         0x48307200
  00128		 |$M47073|

			 ENDP  ; |UpdateVoltageLevels|

	EXPORT	|PlatformSetup|
	IMPORT	|InitTwlPower|
	IMPORT	|OALI2CPostInit|
	IMPORT	|OALI2CInit|

  00000			 AREA	 |.pdata|, PDATA
|$T47163| DCD	|$LN39@PlatformSe|
	DCD	0x4000bd01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PlatformSetup| PROC

; 425  : {

  00000		 |$LN39@PlatformSe|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47160|

; 426  :     pCPU_OPP_Settings opp_setting;
; 427  : 	
; 428  :     //---------------------------------
; 429  :     // setup dpll timings for mpu dpll
; 430  :     //
; 431  :     //if(gCPU_family == CPU_FAMILY_DM37XX)
; 432  :     //{
; 433  : 	opp_setting = &OMAP37x_OPP_Table[BSP_OPM_SELECT_37XX-1];
; 434  :     //}
; 435  :     //else 
; 436  :     //{
; 437  :     //    opp_setting = &OMAP35x_OPP_Table[BSP_OPM_SELECT_35XX-1];
; 438  :     //}
; 439  : 	
; 440  :     // Initialize the platform
; 441  :     WatchdogSetup();

  00004	e3a08312	 mov         r8, #0x12, 6
  00008	e3880b13	 orr         r0, r8, #0x13, 22
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e3a03312	 mov         r3, #0x12, 6
  00018	e1a04000	 mov         r4, r0
  0001c	e38309c5	 orr         r0, r3, #0xC5, 18
  00020	e3a01000	 mov         r1, #0
  00024	eb000000	 bl          OALPAtoVA
  00028	e5943000	 ldr         r3, [r4]
  0002c	e2841020	 add         r1, r4, #0x20
  00030	e3a02001	 mov         r2, #1
  00034	e3833020	 orr         r3, r3, #0x20
  00038	e5843000	 str         r3, [r4]
  0003c	e5b43010	 ldr         r3, [r4, #0x10]!
  00040	e3833020	 orr         r3, r3, #0x20
  00044	e5843000	 str         r3, [r4]
  00048	ea000002	 b           |$LN36@PlatformSe|
  0004c		 |$LL10@PlatformSe|
  0004c	e3520005	 cmp         r2, #5
  00050	0a000004	 beq         |$LN34@PlatformSe|
  00054	e2822001	 add         r2, r2, #1
  00058		 |$LN36@PlatformSe|
  00058	e5913000	 ldr         r3, [r1]
  0005c	e2033020	 and         r3, r3, #0x20
  00060	e3530020	 cmp         r3, #0x20
  00064	1afffff8	 bne         |$LL10@PlatformSe|
  00068		 |$LN34@PlatformSe|
  00068	e3a03caa	 mov         r3, #0xAA, 24
  0006c	e38330aa	 orr         r3, r3, #0xAA
  00070	e5803048	 str         r3, [r0, #0x48]
  00074		 |$LL4@PlatformSe|
  00074	e5903034	 ldr         r3, [r0, #0x34]
  00078	e3530000	 cmp         r3, #0
  0007c	1afffffc	 bne         |$LL4@PlatformSe|
  00080	e3a03c55	 mov         r3, #0x55, 24
  00084	e3833055	 orr         r3, r3, #0x55
  00088	e5803048	 str         r3, [r0, #0x48]

; 442  :     PinMuxSetup();    

  0008c	e3a00cff	 mov         r0, #0xFF, 24
  00090	e59f5258	 ldr         r5, [pc, #0x258]
  00094	e3a01c7f	 mov         r1, #0x7F, 24
  00098	e38070ff	 orr         r7, r0, #0xFF
  0009c	e3a04000	 mov         r4, #0
  000a0	e3a03000	 mov         r3, #0
  000a4	e3a02000	 mov         r2, #0
  000a8	e38160ff	 orr         r6, r1, #0xFF
  000ac		 |$LL16@PlatformSe|
  000ac	e0833005	 add         r3, r3, r5
  000b0	e5933004	 ldr         r3, [r3, #4]
  000b4	e1a00002	 mov         r0, r2
  000b8	e0031006	 and         r1, r3, r6
  000bc	eb000000	 bl          SOCSetPadConfig
  000c0	e2844001	 add         r4, r4, #1
  000c4	e1a03184	 mov         r3, r4, lsl #3
  000c8	e19320b5	 ldrh        r2, [r3, +r5]
  000cc	e1520007	 cmp         r2, r7
  000d0	1afffff5	 bne         |$LL16@PlatformSe|

; 443  : 	
; 444  :     ClockSetup(opp_setting); 

  000d4	e59f0210	 ldr         r0, [pc, #0x210]
  000d8	e3a01000	 mov         r1, #0
  000dc	eb000000	 bl          OALPAtoVA
  000e0	e1a04000	 mov         r4, r0
  000e4	e3880b13	 orr         r0, r8, #0x13, 22
  000e8	e3a01000	 mov         r1, #0
  000ec	eb000000	 bl          OALPAtoVA
  000f0	e3a05312	 mov         r5, #0x12, 6
  000f4	e1a06000	 mov         r6, r0
  000f8	e3850a05	 orr         r0, r5, #5, 20
  000fc	e3a01000	 mov         r1, #0
  00100	eb000000	 bl          OALPAtoVA
  00104	e1a07000	 mov         r7, r0
  00108	e3850c4a	 orr         r0, r5, #0x4A, 24
  0010c	e3a01000	 mov         r1, #0
  00110	eb000000	 bl          OALPAtoVA
  00114	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00118	e3a02003	 mov         r2, #3
  0011c	e5842040	 str         r2, [r4, #0x40]
  00120	e5933000	 ldr         r3, [r3]
  00124	e59f51b8	 ldr         r5, [pc, #0x1B8]
  00128	e1a04000	 mov         r4, r0
  0012c	e3530001	 cmp         r3, #1
  00130	1a000006	 bne         |$LN20@PlatformSe|
  00134	eb000000	 bl          Omap37xx_core_dpll_init
  00138	eb000000	 bl          Omap37xx_dpll4_init
  0013c	e2850030	 add         r0, r5, #0x30
  00140	eb000000	 bl          Mpu_dpll_init
  00144	e2850030	 add         r0, r5, #0x30
  00148	eb000000	 bl          Iva_dpll_init
  0014c	eb000000	 bl          Omap37xx_per_dpll_init
  00150		 |$LN20@PlatformSe|
  00150	e5963000	 ldr         r3, [r6]
  00154	e3a02312	 mov         r2, #0x12, 6

; 445  : 
; 446  : 	GpioSetup();

  00158	e3a01000	 mov         r1, #0
  0015c	e3833009	 orr         r3, r3, #9
  00160	e5863000	 str         r3, [r6]
  00164	e5b63010	 ldr         r3, [r6, #0x10]!
  00168	e3820831	 orr         r0, r2, #0x31, 16
  0016c	e3833009	 orr         r3, r3, #9
  00170	e5863000	 str         r3, [r6]
  00174	e5973000	 ldr         r3, [r7]
  00178	e3833bd2	 orr         r3, r3, #0xD2, 22
  0017c	e5873000	 str         r3, [r7]
  00180	e5b73010	 ldr         r3, [r7, #0x10]!
  00184	e3833bd2	 orr         r3, r3, #0xD2, 22
  00188	e5873000	 str         r3, [r7]
  0018c	e5943010	 ldr         r3, [r4, #0x10]
  00190	e3c33010	 bic         r3, r3, #0x10
  00194	e5843010	 str         r3, [r4, #0x10]
  00198	e5943010	 ldr         r3, [r4, #0x10]
  0019c	e3c33008	 bic         r3, r3, #8
  001a0	e5843010	 str         r3, [r4, #0x10]
  001a4	eb000000	 bl          OALPAtoVA
  001a8	e3e03080	 mvn         r3, #0x80
  001ac	e5803034	 str         r3, [r0, #0x34]

; 447  : 
; 448  :     // configure i2c devices
; 449  :     OALI2CInit(OMAP_DEVICE_I2C1);

  001b0	e3a0000c	 mov         r0, #0xC
  001b4	eb000000	 bl          OALI2CInit

; 450  :     //OALI2CInit(OMAP_DEVICE_I2C2);
; 451  :     //OALI2CInit(OMAP_DEVICE_I2C3);
; 452  : 
; 453  :     OALI2CPostInit();	

  001b8	eb000000	 bl          OALI2CPostInit

; 454  : 	
; 455  :     InitTwlPower();

  001bc	eb000000	 bl          InitTwlPower

; 456  : 
; 457  :     UpdateVoltageLevels(opp_setting);

  001c0	e59f0118	 ldr         r0, [pc, #0x118]
  001c4	e3a01000	 mov         r1, #0
  001c8	eb000000	 bl          OALPAtoVA
  001cc	e3a03812	 mov         r3, #0x12, 16
  001d0	e3833012	 orr         r3, r3, #0x12
  001d4	e1a04000	 mov         r4, r0
  001d8	e5843020	 str         r3, [r4, #0x20]
  001dc	e3a03801	 mov         r3, #1, 16
  001e0	e5843024	 str         r3, [r4, #0x24]
  001e4	e3a03000	 mov         r3, #0
  001e8	e5843028	 str         r3, [r4, #0x28]
  001ec	e3a03817	 mov         r3, #0x17, 16
  001f0	e5843034	 str         r3, [r4, #0x34]
  001f4	e3a03005	 mov         r3, #5
  001f8	e5843038	 str         r3, [r4, #0x38]
  001fc	e5953038	 ldr         r3, [r5, #0x38]
  00200	e3a01602	 mov         r1, #2, 12
  00204	e3812a02	 orr         r2, r1, #2, 20
  00208	e1823c03	 orr         r3, r2, r3, lsl #24
  0020c	e584302c	 str         r3, [r4, #0x2C]
  00210	e595303c	 ldr         r3, [r5, #0x3C]
  00214	e3811008	 orr         r1, r1, #8
  00218	e3a00b7d	 mov         r0, #0x7D, 22
  0021c	e1823c03	 orr         r3, r2, r3, lsl #24
  00220	e5843030	 str         r3, [r4, #0x30]
  00224	e5953038	 ldr         r3, [r5, #0x38]
  00228	e3802001	 orr         r2, r0, #1
  0022c	e1813403	 orr         r3, r1, r3, lsl #8
  00230	e58430b0	 str         r3, [r4, #0xB0]
  00234	e595303c	 ldr         r3, [r5, #0x3C]
  00238	e1813403	 orr         r3, r1, r3, lsl #8
  0023c	e58430d0	 str         r3, [r4, #0xD0]
  00240	e3801010	 orr         r1, r0, #0x10
  00244	e58420b4	 str         r2, [r4, #0xB4]
  00248	e3e034bf	 mvn         r3, #0xBF, 8
  0024c	e58410b8	 str         r1, [r4, #0xB8]
  00250	e58420d4	 str         r2, [r4, #0xD4]
  00254	e22338ff	 eor         r3, r3, #0xFF, 16
  00258	e3e024c3	 mvn         r2, #0xC3, 8
  0025c	e58410d8	 str         r1, [r4, #0xD8]
  00260	e58430bc	 str         r3, [r4, #0xBC]
  00264	e22238ff	 eor         r3, r2, #0xFF, 16
  00268	e58430dc	 str         r3, [r4, #0xDC]
  0026c	e59430b0	 ldr         r3, [r4, #0xB0]
  00270	e3a00064	 mov         r0, #0x64
  00274	e3833001	 orr         r3, r3, #1
  00278	e58430b0	 str         r3, [r4, #0xB0]
  0027c	e59430d0	 ldr         r3, [r4, #0xD0]
  00280	e3833001	 orr         r3, r3, #1
  00284	e58430d0	 str         r3, [r4, #0xD0]
  00288	e59430b0	 ldr         r3, [r4, #0xB0]
  0028c	e3833008	 orr         r3, r3, #8
  00290	e58430b0	 str         r3, [r4, #0xB0]
  00294	e59430d0	 ldr         r3, [r4, #0xD0]
  00298	e3833008	 orr         r3, r3, #8
  0029c	e58430d0	 str         r3, [r4, #0xD0]
  002a0	e59430b0	 ldr         r3, [r4, #0xB0]
  002a4	e3833006	 orr         r3, r3, #6
  002a8	e58430b0	 str         r3, [r4, #0xB0]
  002ac	e59430d0	 ldr         r3, [r4, #0xD0]
  002b0	e3833006	 orr         r3, r3, #6
  002b4	e58430d0	 str         r3, [r4, #0xD0]
  002b8	eb000000	 bl          OALStall
  002bc	e59430b0	 ldr         r3, [r4, #0xB0]
  002c0	e3c3300f	 bic         r3, r3, #0xF
  002c4	e58430b0	 str         r3, [r4, #0xB0]
  002c8	e59430d0	 ldr         r3, [r4, #0xD0]
  002cc	e3c3300f	 bic         r3, r3, #0xF
  002d0	e58430d0	 str         r3, [r4, #0xD0]

; 458  : 
; 459  :     MemorySetup();

  002d4	eb000000	 bl          MemorySetup

; 460  : }

  002d8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  002dc	e12fff1e	 bx          lr
  002e0		 |$LN40@PlatformSe|
  002e0		 |$LN41@PlatformSe|
  002e0	48307200	 DCD         0x48307200
  002e4		 |$LN42@PlatformSe|
  002e4	00000000	 DCD         |OMAP37x_OPP_Table|
  002e8		 |$LN43@PlatformSe|
  002e8	00000000	 DCD         |gCPU_family|
  002ec		 |$LN44@PlatformSe|
  002ec	48306d00	 DCD         0x48306d00
  002f0		 |$LN45@PlatformSe|
  002f0	00000000	 DCD         |?initialPinMux@?1??PinMuxSetup@@9@9|
  002f4		 |$M47161|

			 ENDP  ; |PlatformSetup|

	END
